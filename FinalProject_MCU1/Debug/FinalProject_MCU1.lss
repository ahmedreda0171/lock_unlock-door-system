
FinalProject_MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e10  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00800060  00002e10  00002e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002538  00000000  00000000  00002f28  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b87  00000000  00000000  00005460  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006147  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000062d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000831b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000941c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a3a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a7e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 47 06 	call	0xc8e	; 0xc8e <main>
      7a:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa ef       	ldi	r26, 0xFA	; 250
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	8a ef       	ldi	r24, 0xFA	; 250
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6a ef       	ldi	r22, 0xFA	; 250
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <main>:
#define buzzer 2
#define motor 5


int main()
{
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	c8 58       	subi	r28, 0x88	; 136
     c9c:	d0 40       	sbci	r29, 0x00	; 0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
	UART_init(); // initialize UART
     ca8:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <UART_init>
	LCD_init();
     cac:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <LCD_init>
	uint8 key , entered_password[4] , old_password[4];
	uint8 status = init_lock , count_error=0 , password_check=0;
     cb0:	fe 01       	movw	r30, r28
     cb2:	e1 58       	subi	r30, 0x81	; 129
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	84 e6       	ldi	r24, 0x64	; 100
     cb8:	80 83       	st	Z, r24
     cba:	fe 01       	movw	r30, r28
     cbc:	e2 58       	subi	r30, 0x82	; 130
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	10 82       	st	Z, r1
     cc2:	fe 01       	movw	r30, r28
     cc4:	e3 58       	subi	r30, 0x83	; 131
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	10 82       	st	Z, r1

	while(1)
	{
		LCD_clearScreen();
     cca:	0e 94 fd 14 	call	0x29fa	; 0x29fa <LCD_clearScreen>
		LCD_intgerToString(1);
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_intgerToString>
		LCD_displayString("-(un)/lock door.");
     cda:	80 e6       	ldi	r24, 0x60	; 96
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>

		LCD_goToRowColumn(1,0);
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	0e 94 b5 13 	call	0x276a	; 0x276a <LCD_goToRowColumn>
		LCD_intgerToString(2);
     cea:	62 e0       	ldi	r22, 0x02	; 2
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_intgerToString>
		LCD_displayString("-change password.");
     cf6:	81 e7       	ldi	r24, 0x71	; 113
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>

		key = KeyPad_getPressedKey();
     cfe:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <KeyPad_getPressedKey>
     d02:	fe 01       	movw	r30, r28
     d04:	e0 58       	subi	r30, 0x80	; 128
     d06:	ff 4f       	sbci	r31, 0xFF	; 255
     d08:	80 83       	st	Z, r24

		if(key == 1)
     d0a:	fe 01       	movw	r30, r28
     d0c:	e0 58       	subi	r30, 0x80	; 128
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	80 81       	ld	r24, Z
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	09 f0       	breq	.+2      	; 0xd18 <main+0x8a>
     d16:	11 c3       	rjmp	.+1570   	; 0x133a <main+0x6ac>
		{
			UART_sendByte(lock_unlock);
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	0e 94 00 16 	call	0x2c00	; 0x2c00 <UART_sendByte>

			if(status != unlock)
     d1e:	fe 01       	movw	r30, r28
     d20:	e1 58       	subi	r30, 0x81	; 129
     d22:	ff 4f       	sbci	r31, 0xFF	; 255
     d24:	80 81       	ld	r24, Z
     d26:	8b 30       	cpi	r24, 0x0B	; 11
     d28:	09 f4       	brne	.+2      	; 0xd2c <main+0x9e>
     d2a:	40 c2       	rjmp	.+1152   	; 0x11ac <main+0x51e>
     d2c:	37 c2       	rjmp	.+1134   	; 0x119c <main+0x50e>
			{
				while(status != unlock)
				{
					if(status == init_lock)
     d2e:	fe 01       	movw	r30, r28
     d30:	e1 58       	subi	r30, 0x81	; 129
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	80 81       	ld	r24, Z
     d36:	84 36       	cpi	r24, 0x64	; 100
     d38:	59 f4       	brne	.+22     	; 0xd50 <main+0xc2>
					{
						LCD_clearScreen();
     d3a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <LCD_clearScreen>
				        LCD_displayString("Enter password:");
     d3e:	83 e8       	ldi	r24, 0x83	; 131
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>
					    LCD_goToRowColumn(1,0);
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	0e 94 b5 13 	call	0x276a	; 0x276a <LCD_goToRowColumn>
     d4e:	43 c0       	rjmp	.+134    	; 0xdd6 <main+0x148>
					}

					else if(status == wrong_password)
     d50:	fe 01       	movw	r30, r28
     d52:	e1 58       	subi	r30, 0x81	; 129
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	80 81       	ld	r24, Z
     d58:	84 30       	cpi	r24, 0x04	; 4
     d5a:	59 f4       	brne	.+22     	; 0xd72 <main+0xe4>
					{
						LCD_clearScreen();
     d5c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <LCD_clearScreen>
						LCD_displayString("Wrong!(Try again)");
     d60:	83 e9       	ldi	r24, 0x93	; 147
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>
						LCD_goToRowColumn(1,0);
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	0e 94 b5 13 	call	0x276a	; 0x276a <LCD_goToRowColumn>
     d70:	32 c0       	rjmp	.+100    	; 0xdd6 <main+0x148>
					}

					else if(status == lock_system)
     d72:	fe 01       	movw	r30, r28
     d74:	e1 58       	subi	r30, 0x81	; 129
     d76:	ff 4f       	sbci	r31, 0xFF	; 255
     d78:	80 81       	ld	r24, Z
     d7a:	87 30       	cpi	r24, 0x07	; 7
     d7c:	61 f5       	brne	.+88     	; 0xdd6 <main+0x148>
					{
						LCD_clearScreen();
     d7e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <LCD_clearScreen>
						LCD_displayString("lock_system");
     d82:	85 ea       	ldi	r24, 0xA5	; 165
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>
						LCD_goToRowColumn(1,0);
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	0e 94 b5 13 	call	0x276a	; 0x276a <LCD_goToRowColumn>
						LCD_displayString("for");
     d92:	81 eb       	ldi	r24, 0xB1	; 177
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>
						LCD_goToRowColumn(1,4);
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	64 e0       	ldi	r22, 0x04	; 4
     d9e:	0e 94 b5 13 	call	0x276a	; 0x276a <LCD_goToRowColumn>
						LCD_intgerToString(10);
     da2:	6a e0       	ldi	r22, 0x0A	; 10
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_intgerToString>
						LCD_displayString(" sec");
     dae:	85 eb       	ldi	r24, 0xB5	; 181
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>

						status = UART_recieveByte();
     db6:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <UART_recieveByte>
     dba:	fe 01       	movw	r30, r28
     dbc:	e1 58       	subi	r30, 0x81	; 129
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	80 83       	st	Z, r24

						LCD_clearScreen();
     dc2:	0e 94 fd 14 	call	0x29fa	; 0x29fa <LCD_clearScreen>
				        LCD_displayString("Enter password:");
     dc6:	83 e8       	ldi	r24, 0x83	; 131
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>
					    LCD_goToRowColumn(1,0);
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	0e 94 b5 13 	call	0x276a	; 0x276a <LCD_goToRowColumn>
					}

				    for(int i=0;i<4;i++)
     dd6:	fe 01       	movw	r30, r28
     dd8:	e5 58       	subi	r30, 0x85	; 133
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	11 82       	std	Z+1, r1	; 0x01
     dde:	10 82       	st	Z, r1
     de0:	e1 c0       	rjmp	.+450    	; 0xfa4 <main+0x316>
     de2:	fe 01       	movw	r30, r28
     de4:	e3 59       	subi	r30, 0x93	; 147
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	a6 e9       	ldi	r26, 0x96	; 150
     dee:	b3 e4       	ldi	r27, 0x43	; 67
     df0:	80 83       	st	Z, r24
     df2:	91 83       	std	Z+1, r25	; 0x01
     df4:	a2 83       	std	Z+2, r26	; 0x02
     df6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df8:	8e 01       	movw	r16, r28
     dfa:	07 59       	subi	r16, 0x97	; 151
     dfc:	1f 4f       	sbci	r17, 0xFF	; 255
     dfe:	fe 01       	movw	r30, r28
     e00:	e3 59       	subi	r30, 0x93	; 147
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	60 81       	ld	r22, Z
     e06:	71 81       	ldd	r23, Z+1	; 0x01
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	93 81       	ldd	r25, Z+3	; 0x03
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	4a ef       	ldi	r20, 0xFA	; 250
     e12:	54 e4       	ldi	r21, 0x44	; 68
     e14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	f8 01       	movw	r30, r16
     e1e:	80 83       	st	Z, r24
     e20:	91 83       	std	Z+1, r25	; 0x01
     e22:	a2 83       	std	Z+2, r26	; 0x02
     e24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e26:	fe 01       	movw	r30, r28
     e28:	e7 59       	subi	r30, 0x97	; 151
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	60 81       	ld	r22, Z
     e2e:	71 81       	ldd	r23, Z+1	; 0x01
     e30:	82 81       	ldd	r24, Z+2	; 0x02
     e32:	93 81       	ldd	r25, Z+3	; 0x03
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e8       	ldi	r20, 0x80	; 128
     e3a:	5f e3       	ldi	r21, 0x3F	; 63
     e3c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e40:	88 23       	and	r24, r24
     e42:	44 f4       	brge	.+16     	; 0xe54 <main+0x1c6>
		__ticks = 1;
     e44:	fe 01       	movw	r30, r28
     e46:	e9 59       	subi	r30, 0x99	; 153
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	80 83       	st	Z, r24
     e52:	64 c0       	rjmp	.+200    	; 0xf1c <main+0x28e>
	else if (__tmp > 65535)
     e54:	fe 01       	movw	r30, r28
     e56:	e7 59       	subi	r30, 0x97	; 151
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	82 81       	ldd	r24, Z+2	; 0x02
     e60:	93 81       	ldd	r25, Z+3	; 0x03
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	3f ef       	ldi	r19, 0xFF	; 255
     e66:	4f e7       	ldi	r20, 0x7F	; 127
     e68:	57 e4       	ldi	r21, 0x47	; 71
     e6a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e6e:	18 16       	cp	r1, r24
     e70:	0c f0       	brlt	.+2      	; 0xe74 <main+0x1e6>
     e72:	43 c0       	rjmp	.+134    	; 0xefa <main+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e74:	fe 01       	movw	r30, r28
     e76:	e3 59       	subi	r30, 0x93	; 147
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	60 81       	ld	r22, Z
     e7c:	71 81       	ldd	r23, Z+1	; 0x01
     e7e:	82 81       	ldd	r24, Z+2	; 0x02
     e80:	93 81       	ldd	r25, Z+3	; 0x03
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e2       	ldi	r20, 0x20	; 32
     e88:	51 e4       	ldi	r21, 0x41	; 65
     e8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	8e 01       	movw	r16, r28
     e94:	09 59       	subi	r16, 0x99	; 153
     e96:	1f 4f       	sbci	r17, 0xFF	; 255
     e98:	bc 01       	movw	r22, r24
     e9a:	cd 01       	movw	r24, r26
     e9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	f8 01       	movw	r30, r16
     ea6:	91 83       	std	Z+1, r25	; 0x01
     ea8:	80 83       	st	Z, r24
     eaa:	1f c0       	rjmp	.+62     	; 0xeea <main+0x25c>
     eac:	fe 01       	movw	r30, r28
     eae:	eb 59       	subi	r30, 0x9B	; 155
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	88 ec       	ldi	r24, 0xC8	; 200
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	91 83       	std	Z+1, r25	; 0x01
     eb8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eba:	fe 01       	movw	r30, r28
     ebc:	eb 59       	subi	r30, 0x9B	; 155
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <main+0x236>
     ec8:	fe 01       	movw	r30, r28
     eca:	eb 59       	subi	r30, 0x9B	; 155
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	91 83       	std	Z+1, r25	; 0x01
     ed0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed2:	de 01       	movw	r26, r28
     ed4:	a9 59       	subi	r26, 0x99	; 153
     ed6:	bf 4f       	sbci	r27, 0xFF	; 255
     ed8:	fe 01       	movw	r30, r28
     eda:	e9 59       	subi	r30, 0x99	; 153
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	11 96       	adiw	r26, 0x01	; 1
     ee6:	9c 93       	st	X, r25
     ee8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eea:	fe 01       	movw	r30, r28
     eec:	e9 59       	subi	r30, 0x99	; 153
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	80 81       	ld	r24, Z
     ef2:	91 81       	ldd	r25, Z+1	; 0x01
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	d1 f6       	brne	.-76     	; 0xeac <main+0x21e>
     ef8:	27 c0       	rjmp	.+78     	; 0xf48 <main+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efa:	8e 01       	movw	r16, r28
     efc:	09 59       	subi	r16, 0x99	; 153
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
     f00:	fe 01       	movw	r30, r28
     f02:	e7 59       	subi	r30, 0x97	; 151
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	60 81       	ld	r22, Z
     f08:	71 81       	ldd	r23, Z+1	; 0x01
     f0a:	82 81       	ldd	r24, Z+2	; 0x02
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	f8 01       	movw	r30, r16
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	80 83       	st	Z, r24
     f1c:	de 01       	movw	r26, r28
     f1e:	ad 59       	subi	r26, 0x9D	; 157
     f20:	bf 4f       	sbci	r27, 0xFF	; 255
     f22:	fe 01       	movw	r30, r28
     f24:	e9 59       	subi	r30, 0x99	; 153
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	8d 93       	st	X+, r24
     f2e:	9c 93       	st	X, r25
     f30:	fe 01       	movw	r30, r28
     f32:	ed 59       	subi	r30, 0x9D	; 157
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <main+0x2ac>
     f3e:	fe 01       	movw	r30, r28
     f40:	ed 59       	subi	r30, 0x9D	; 157
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	91 83       	std	Z+1, r25	; 0x01
     f46:	80 83       	st	Z, r24
				    {
				    	_delay_ms(300);
						key = KeyPad_getPressedKey();
     f48:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <KeyPad_getPressedKey>
     f4c:	fe 01       	movw	r30, r28
     f4e:	e0 58       	subi	r30, 0x80	; 128
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	80 83       	st	Z, r24
						LCD_intgerToString(key);
     f54:	fe 01       	movw	r30, r28
     f56:	e0 58       	subi	r30, 0x80	; 128
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	80 81       	ld	r24, Z
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	a0 e0       	ldi	r26, 0x00	; 0
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_intgerToString>
					    entered_password[i] = key;
     f6c:	fe 01       	movw	r30, r28
     f6e:	e5 58       	subi	r30, 0x85	; 133
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	20 81       	ld	r18, Z
     f74:	31 81       	ldd	r19, Z+1	; 0x01
     f76:	ce 01       	movw	r24, r28
     f78:	8f 57       	subi	r24, 0x7F	; 127
     f7a:	9f 4f       	sbci	r25, 0xFF	; 255
     f7c:	dc 01       	movw	r26, r24
     f7e:	a2 0f       	add	r26, r18
     f80:	b3 1f       	adc	r27, r19
     f82:	fe 01       	movw	r30, r28
     f84:	e0 58       	subi	r30, 0x80	; 128
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	80 81       	ld	r24, Z
     f8a:	8c 93       	st	X, r24
						LCD_clearScreen();
				        LCD_displayString("Enter password:");
					    LCD_goToRowColumn(1,0);
					}

				    for(int i=0;i<4;i++)
     f8c:	de 01       	movw	r26, r28
     f8e:	a5 58       	subi	r26, 0x85	; 133
     f90:	bf 4f       	sbci	r27, 0xFF	; 255
     f92:	fe 01       	movw	r30, r28
     f94:	e5 58       	subi	r30, 0x85	; 133
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	80 81       	ld	r24, Z
     f9a:	91 81       	ldd	r25, Z+1	; 0x01
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	11 96       	adiw	r26, 0x01	; 1
     fa0:	9c 93       	st	X, r25
     fa2:	8e 93       	st	-X, r24
     fa4:	fe 01       	movw	r30, r28
     fa6:	e5 58       	subi	r30, 0x85	; 133
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	80 81       	ld	r24, Z
     fac:	91 81       	ldd	r25, Z+1	; 0x01
     fae:	84 30       	cpi	r24, 0x04	; 4
     fb0:	91 05       	cpc	r25, r1
     fb2:	0c f4       	brge	.+2      	; 0xfb6 <main+0x328>
     fb4:	16 cf       	rjmp	.-468    	; 0xde2 <main+0x154>
						key = KeyPad_getPressedKey();
						LCD_intgerToString(key);
					    entered_password[i] = key;
				    }

					for(int i=0; i<4; i++)
     fb6:	fe 01       	movw	r30, r28
     fb8:	e7 58       	subi	r30, 0x87	; 135
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	11 82       	std	Z+1, r1	; 0x01
     fbe:	10 82       	st	Z, r1
     fc0:	1a c0       	rjmp	.+52     	; 0xff6 <main+0x368>
					{
						UART_sendByte(entered_password[i]);
     fc2:	fe 01       	movw	r30, r28
     fc4:	e7 58       	subi	r30, 0x87	; 135
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	20 81       	ld	r18, Z
     fca:	31 81       	ldd	r19, Z+1	; 0x01
     fcc:	ce 01       	movw	r24, r28
     fce:	8f 57       	subi	r24, 0x7F	; 127
     fd0:	9f 4f       	sbci	r25, 0xFF	; 255
     fd2:	fc 01       	movw	r30, r24
     fd4:	e2 0f       	add	r30, r18
     fd6:	f3 1f       	adc	r31, r19
     fd8:	80 81       	ld	r24, Z
     fda:	0e 94 00 16 	call	0x2c00	; 0x2c00 <UART_sendByte>
						key = KeyPad_getPressedKey();
						LCD_intgerToString(key);
					    entered_password[i] = key;
				    }

					for(int i=0; i<4; i++)
     fde:	de 01       	movw	r26, r28
     fe0:	a7 58       	subi	r26, 0x87	; 135
     fe2:	bf 4f       	sbci	r27, 0xFF	; 255
     fe4:	fe 01       	movw	r30, r28
     fe6:	e7 58       	subi	r30, 0x87	; 135
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	80 81       	ld	r24, Z
     fec:	91 81       	ldd	r25, Z+1	; 0x01
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	11 96       	adiw	r26, 0x01	; 1
     ff2:	9c 93       	st	X, r25
     ff4:	8e 93       	st	-X, r24
     ff6:	fe 01       	movw	r30, r28
     ff8:	e7 58       	subi	r30, 0x87	; 135
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	84 30       	cpi	r24, 0x04	; 4
    1002:	91 05       	cpc	r25, r1
    1004:	f4 f2       	brlt	.-68     	; 0xfc2 <main+0x334>
					{
						UART_sendByte(entered_password[i]);
					}

					status = UART_recieveByte();
    1006:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <UART_recieveByte>
    100a:	fe 01       	movw	r30, r28
    100c:	e1 58       	subi	r30, 0x81	; 129
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 83       	st	Z, r24

					 if(status == unlock)
    1012:	fe 01       	movw	r30, r28
    1014:	e1 58       	subi	r30, 0x81	; 129
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	80 81       	ld	r24, Z
    101a:	8b 30       	cpi	r24, 0x0B	; 11
    101c:	09 f0       	breq	.+2      	; 0x1020 <main+0x392>
    101e:	be c0       	rjmp	.+380    	; 0x119c <main+0x50e>
					{
						LCD_clearScreen();
    1020:	0e 94 fd 14 	call	0x29fa	; 0x29fa <LCD_clearScreen>
						LCD_displayString("success");
    1024:	8a eb       	ldi	r24, 0xBA	; 186
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>
						LCD_goToRowColumn(1,0);
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	0e 94 b5 13 	call	0x276a	; 0x276a <LCD_goToRowColumn>
    1034:	fe 01       	movw	r30, r28
    1036:	e1 5a       	subi	r30, 0xA1	; 161
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	aa e7       	ldi	r26, 0x7A	; 122
    1040:	b4 e4       	ldi	r27, 0x44	; 68
    1042:	80 83       	st	Z, r24
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	a2 83       	std	Z+2, r26	; 0x02
    1048:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104a:	8e 01       	movw	r16, r28
    104c:	05 5a       	subi	r16, 0xA5	; 165
    104e:	1f 4f       	sbci	r17, 0xFF	; 255
    1050:	fe 01       	movw	r30, r28
    1052:	e1 5a       	subi	r30, 0xA1	; 161
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	82 81       	ldd	r24, Z+2	; 0x02
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	4a ef       	ldi	r20, 0xFA	; 250
    1064:	54 e4       	ldi	r21, 0x44	; 68
    1066:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	f8 01       	movw	r30, r16
    1070:	80 83       	st	Z, r24
    1072:	91 83       	std	Z+1, r25	; 0x01
    1074:	a2 83       	std	Z+2, r26	; 0x02
    1076:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1078:	fe 01       	movw	r30, r28
    107a:	e5 5a       	subi	r30, 0xA5	; 165
    107c:	ff 4f       	sbci	r31, 0xFF	; 255
    107e:	60 81       	ld	r22, Z
    1080:	71 81       	ldd	r23, Z+1	; 0x01
    1082:	82 81       	ldd	r24, Z+2	; 0x02
    1084:	93 81       	ldd	r25, Z+3	; 0x03
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e8       	ldi	r20, 0x80	; 128
    108c:	5f e3       	ldi	r21, 0x3F	; 63
    108e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1092:	88 23       	and	r24, r24
    1094:	44 f4       	brge	.+16     	; 0x10a6 <main+0x418>
		__ticks = 1;
    1096:	fe 01       	movw	r30, r28
    1098:	e7 5a       	subi	r30, 0xA7	; 167
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	80 83       	st	Z, r24
    10a4:	64 c0       	rjmp	.+200    	; 0x116e <main+0x4e0>
	else if (__tmp > 65535)
    10a6:	fe 01       	movw	r30, r28
    10a8:	e5 5a       	subi	r30, 0xA5	; 165
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	60 81       	ld	r22, Z
    10ae:	71 81       	ldd	r23, Z+1	; 0x01
    10b0:	82 81       	ldd	r24, Z+2	; 0x02
    10b2:	93 81       	ldd	r25, Z+3	; 0x03
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	3f ef       	ldi	r19, 0xFF	; 255
    10b8:	4f e7       	ldi	r20, 0x7F	; 127
    10ba:	57 e4       	ldi	r21, 0x47	; 71
    10bc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10c0:	18 16       	cp	r1, r24
    10c2:	0c f0       	brlt	.+2      	; 0x10c6 <main+0x438>
    10c4:	43 c0       	rjmp	.+134    	; 0x114c <main+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c6:	fe 01       	movw	r30, r28
    10c8:	e1 5a       	subi	r30, 0xA1	; 161
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	60 81       	ld	r22, Z
    10ce:	71 81       	ldd	r23, Z+1	; 0x01
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	93 81       	ldd	r25, Z+3	; 0x03
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e2       	ldi	r20, 0x20	; 32
    10da:	51 e4       	ldi	r21, 0x41	; 65
    10dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	8e 01       	movw	r16, r28
    10e6:	07 5a       	subi	r16, 0xA7	; 167
    10e8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	f8 01       	movw	r30, r16
    10f8:	91 83       	std	Z+1, r25	; 0x01
    10fa:	80 83       	st	Z, r24
    10fc:	1f c0       	rjmp	.+62     	; 0x113c <main+0x4ae>
    10fe:	fe 01       	movw	r30, r28
    1100:	e9 5a       	subi	r30, 0xA9	; 169
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	88 ec       	ldi	r24, 0xC8	; 200
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	91 83       	std	Z+1, r25	; 0x01
    110a:	80 83       	st	Z, r24
    110c:	fe 01       	movw	r30, r28
    110e:	e9 5a       	subi	r30, 0xA9	; 169
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	80 81       	ld	r24, Z
    1114:	91 81       	ldd	r25, Z+1	; 0x01
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <main+0x488>
    111a:	fe 01       	movw	r30, r28
    111c:	e9 5a       	subi	r30, 0xA9	; 169
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1124:	de 01       	movw	r26, r28
    1126:	a7 5a       	subi	r26, 0xA7	; 167
    1128:	bf 4f       	sbci	r27, 0xFF	; 255
    112a:	fe 01       	movw	r30, r28
    112c:	e7 5a       	subi	r30, 0xA7	; 167
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	80 81       	ld	r24, Z
    1132:	91 81       	ldd	r25, Z+1	; 0x01
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	11 96       	adiw	r26, 0x01	; 1
    1138:	9c 93       	st	X, r25
    113a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113c:	fe 01       	movw	r30, r28
    113e:	e7 5a       	subi	r30, 0xA7	; 167
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	80 81       	ld	r24, Z
    1144:	91 81       	ldd	r25, Z+1	; 0x01
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	d1 f6       	brne	.-76     	; 0x10fe <main+0x470>
    114a:	28 c0       	rjmp	.+80     	; 0x119c <main+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114c:	8e 01       	movw	r16, r28
    114e:	07 5a       	subi	r16, 0xA7	; 167
    1150:	1f 4f       	sbci	r17, 0xFF	; 255
    1152:	fe 01       	movw	r30, r28
    1154:	e5 5a       	subi	r30, 0xA5	; 165
    1156:	ff 4f       	sbci	r31, 0xFF	; 255
    1158:	60 81       	ld	r22, Z
    115a:	71 81       	ldd	r23, Z+1	; 0x01
    115c:	82 81       	ldd	r24, Z+2	; 0x02
    115e:	93 81       	ldd	r25, Z+3	; 0x03
    1160:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	f8 01       	movw	r30, r16
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	80 83       	st	Z, r24
    116e:	de 01       	movw	r26, r28
    1170:	ab 5a       	subi	r26, 0xAB	; 171
    1172:	bf 4f       	sbci	r27, 0xFF	; 255
    1174:	fe 01       	movw	r30, r28
    1176:	e7 5a       	subi	r30, 0xA7	; 167
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	80 81       	ld	r24, Z
    117c:	91 81       	ldd	r25, Z+1	; 0x01
    117e:	11 96       	adiw	r26, 0x01	; 1
    1180:	9c 93       	st	X, r25
    1182:	8e 93       	st	-X, r24
    1184:	fe 01       	movw	r30, r28
    1186:	eb 5a       	subi	r30, 0xAB	; 171
    1188:	ff 4f       	sbci	r31, 0xFF	; 255
    118a:	80 81       	ld	r24, Z
    118c:	91 81       	ldd	r25, Z+1	; 0x01
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	f1 f7       	brne	.-4      	; 0x118e <main+0x500>
    1192:	fe 01       	movw	r30, r28
    1194:	eb 5a       	subi	r30, 0xAB	; 171
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	91 83       	std	Z+1, r25	; 0x01
    119a:	80 83       	st	Z, r24
		{
			UART_sendByte(lock_unlock);

			if(status != unlock)
			{
				while(status != unlock)
    119c:	fe 01       	movw	r30, r28
    119e:	e1 58       	subi	r30, 0x81	; 129
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	80 81       	ld	r24, Z
    11a4:	8b 30       	cpi	r24, 0x0B	; 11
    11a6:	09 f0       	breq	.+2      	; 0x11aa <main+0x51c>
    11a8:	c2 cd       	rjmp	.-1148   	; 0xd2e <main+0xa0>
    11aa:	8f cd       	rjmp	.-1250   	; 0xcca <main+0x3c>
						_delay_ms(1000);
					}
				}
			}

			else if(status == unlock)
    11ac:	fe 01       	movw	r30, r28
    11ae:	e1 58       	subi	r30, 0x81	; 129
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	80 81       	ld	r24, Z
    11b4:	8b 30       	cpi	r24, 0x0B	; 11
    11b6:	09 f0       	breq	.+2      	; 0x11ba <main+0x52c>
    11b8:	88 cd       	rjmp	.-1264   	; 0xcca <main+0x3c>
			{
				LCD_clearScreen();
    11ba:	0e 94 fd 14 	call	0x29fa	; 0x29fa <LCD_clearScreen>
				LCD_displayString("locked");
    11be:	82 ec       	ldi	r24, 0xC2	; 194
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>
    11c6:	fe 01       	movw	r30, r28
    11c8:	ef 5a       	subi	r30, 0xAF	; 175
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	aa e7       	ldi	r26, 0x7A	; 122
    11d2:	b4 e4       	ldi	r27, 0x44	; 68
    11d4:	80 83       	st	Z, r24
    11d6:	91 83       	std	Z+1, r25	; 0x01
    11d8:	a2 83       	std	Z+2, r26	; 0x02
    11da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11dc:	8e 01       	movw	r16, r28
    11de:	03 5b       	subi	r16, 0xB3	; 179
    11e0:	1f 4f       	sbci	r17, 0xFF	; 255
    11e2:	fe 01       	movw	r30, r28
    11e4:	ef 5a       	subi	r30, 0xAF	; 175
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	4a ef       	ldi	r20, 0xFA	; 250
    11f6:	54 e4       	ldi	r21, 0x44	; 68
    11f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	f8 01       	movw	r30, r16
    1202:	80 83       	st	Z, r24
    1204:	91 83       	std	Z+1, r25	; 0x01
    1206:	a2 83       	std	Z+2, r26	; 0x02
    1208:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    120a:	fe 01       	movw	r30, r28
    120c:	e3 5b       	subi	r30, 0xB3	; 179
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	60 81       	ld	r22, Z
    1212:	71 81       	ldd	r23, Z+1	; 0x01
    1214:	82 81       	ldd	r24, Z+2	; 0x02
    1216:	93 81       	ldd	r25, Z+3	; 0x03
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e8       	ldi	r20, 0x80	; 128
    121e:	5f e3       	ldi	r21, 0x3F	; 63
    1220:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1224:	88 23       	and	r24, r24
    1226:	44 f4       	brge	.+16     	; 0x1238 <main+0x5aa>
		__ticks = 1;
    1228:	fe 01       	movw	r30, r28
    122a:	e5 5b       	subi	r30, 0xB5	; 181
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	80 83       	st	Z, r24
    1236:	64 c0       	rjmp	.+200    	; 0x1300 <main+0x672>
	else if (__tmp > 65535)
    1238:	fe 01       	movw	r30, r28
    123a:	e3 5b       	subi	r30, 0xB3	; 179
    123c:	ff 4f       	sbci	r31, 0xFF	; 255
    123e:	60 81       	ld	r22, Z
    1240:	71 81       	ldd	r23, Z+1	; 0x01
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	3f ef       	ldi	r19, 0xFF	; 255
    124a:	4f e7       	ldi	r20, 0x7F	; 127
    124c:	57 e4       	ldi	r21, 0x47	; 71
    124e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1252:	18 16       	cp	r1, r24
    1254:	0c f0       	brlt	.+2      	; 0x1258 <main+0x5ca>
    1256:	43 c0       	rjmp	.+134    	; 0x12de <main+0x650>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1258:	fe 01       	movw	r30, r28
    125a:	ef 5a       	subi	r30, 0xAF	; 175
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	60 81       	ld	r22, Z
    1260:	71 81       	ldd	r23, Z+1	; 0x01
    1262:	82 81       	ldd	r24, Z+2	; 0x02
    1264:	93 81       	ldd	r25, Z+3	; 0x03
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	40 e2       	ldi	r20, 0x20	; 32
    126c:	51 e4       	ldi	r21, 0x41	; 65
    126e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	8e 01       	movw	r16, r28
    1278:	05 5b       	subi	r16, 0xB5	; 181
    127a:	1f 4f       	sbci	r17, 0xFF	; 255
    127c:	bc 01       	movw	r22, r24
    127e:	cd 01       	movw	r24, r26
    1280:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	f8 01       	movw	r30, r16
    128a:	91 83       	std	Z+1, r25	; 0x01
    128c:	80 83       	st	Z, r24
    128e:	1f c0       	rjmp	.+62     	; 0x12ce <main+0x640>
    1290:	fe 01       	movw	r30, r28
    1292:	e7 5b       	subi	r30, 0xB7	; 183
    1294:	ff 4f       	sbci	r31, 0xFF	; 255
    1296:	88 ec       	ldi	r24, 0xC8	; 200
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	91 83       	std	Z+1, r25	; 0x01
    129c:	80 83       	st	Z, r24
    129e:	fe 01       	movw	r30, r28
    12a0:	e7 5b       	subi	r30, 0xB7	; 183
    12a2:	ff 4f       	sbci	r31, 0xFF	; 255
    12a4:	80 81       	ld	r24, Z
    12a6:	91 81       	ldd	r25, Z+1	; 0x01
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	f1 f7       	brne	.-4      	; 0x12a8 <main+0x61a>
    12ac:	fe 01       	movw	r30, r28
    12ae:	e7 5b       	subi	r30, 0xB7	; 183
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	91 83       	std	Z+1, r25	; 0x01
    12b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b6:	de 01       	movw	r26, r28
    12b8:	a5 5b       	subi	r26, 0xB5	; 181
    12ba:	bf 4f       	sbci	r27, 0xFF	; 255
    12bc:	fe 01       	movw	r30, r28
    12be:	e5 5b       	subi	r30, 0xB5	; 181
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	80 81       	ld	r24, Z
    12c4:	91 81       	ldd	r25, Z+1	; 0x01
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	11 96       	adiw	r26, 0x01	; 1
    12ca:	9c 93       	st	X, r25
    12cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ce:	fe 01       	movw	r30, r28
    12d0:	e5 5b       	subi	r30, 0xB5	; 181
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	80 81       	ld	r24, Z
    12d6:	91 81       	ldd	r25, Z+1	; 0x01
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	d1 f6       	brne	.-76     	; 0x1290 <main+0x602>
    12dc:	27 c0       	rjmp	.+78     	; 0x132c <main+0x69e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12de:	8e 01       	movw	r16, r28
    12e0:	05 5b       	subi	r16, 0xB5	; 181
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	fe 01       	movw	r30, r28
    12e6:	e3 5b       	subi	r30, 0xB3	; 179
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	60 81       	ld	r22, Z
    12ec:	71 81       	ldd	r23, Z+1	; 0x01
    12ee:	82 81       	ldd	r24, Z+2	; 0x02
    12f0:	93 81       	ldd	r25, Z+3	; 0x03
    12f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	f8 01       	movw	r30, r16
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	80 83       	st	Z, r24
    1300:	de 01       	movw	r26, r28
    1302:	a9 5b       	subi	r26, 0xB9	; 185
    1304:	bf 4f       	sbci	r27, 0xFF	; 255
    1306:	fe 01       	movw	r30, r28
    1308:	e5 5b       	subi	r30, 0xB5	; 181
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	80 81       	ld	r24, Z
    130e:	91 81       	ldd	r25, Z+1	; 0x01
    1310:	8d 93       	st	X+, r24
    1312:	9c 93       	st	X, r25
    1314:	fe 01       	movw	r30, r28
    1316:	e9 5b       	subi	r30, 0xB9	; 185
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	80 81       	ld	r24, Z
    131c:	91 81       	ldd	r25, Z+1	; 0x01
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <main+0x690>
    1322:	fe 01       	movw	r30, r28
    1324:	e9 5b       	subi	r30, 0xB9	; 185
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	91 83       	std	Z+1, r25	; 0x01
    132a:	80 83       	st	Z, r24
				_delay_ms(1000);
				status = UART_recieveByte();
    132c:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <UART_recieveByte>
    1330:	fe 01       	movw	r30, r28
    1332:	e1 58       	subi	r30, 0x81	; 129
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	80 83       	st	Z, r24
    1338:	c8 cc       	rjmp	.-1648   	; 0xcca <main+0x3c>
			}

		}


		else if(key == change_password)
    133a:	fe 01       	movw	r30, r28
    133c:	e0 58       	subi	r30, 0x80	; 128
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	80 81       	ld	r24, Z
    1342:	82 30       	cpi	r24, 0x02	; 2
    1344:	09 f0       	breq	.+2      	; 0x1348 <main+0x6ba>
    1346:	c1 cc       	rjmp	.-1662   	; 0xcca <main+0x3c>
		{
			UART_sendByte(change_password);
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	0e 94 00 16 	call	0x2c00	; 0x2c00 <UART_sendByte>

			for(int i=0; i<4; i++)
    134e:	fe 01       	movw	r30, r28
    1350:	e9 58       	subi	r30, 0x89	; 137
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	11 82       	std	Z+1, r1	; 0x01
    1356:	10 82       	st	Z, r1
    1358:	1b c0       	rjmp	.+54     	; 0x1390 <main+0x702>
			{
				old_password[i] = UART_recieveByte();
    135a:	fe 01       	movw	r30, r28
    135c:	e9 58       	subi	r30, 0x89	; 137
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	00 81       	ld	r16, Z
    1362:	11 81       	ldd	r17, Z+1	; 0x01
    1364:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <UART_recieveByte>
    1368:	28 2f       	mov	r18, r24
    136a:	ce 01       	movw	r24, r28
    136c:	8b 57       	subi	r24, 0x7B	; 123
    136e:	9f 4f       	sbci	r25, 0xFF	; 255
    1370:	fc 01       	movw	r30, r24
    1372:	e0 0f       	add	r30, r16
    1374:	f1 1f       	adc	r31, r17
    1376:	20 83       	st	Z, r18

		else if(key == change_password)
		{
			UART_sendByte(change_password);

			for(int i=0; i<4; i++)
    1378:	de 01       	movw	r26, r28
    137a:	a9 58       	subi	r26, 0x89	; 137
    137c:	bf 4f       	sbci	r27, 0xFF	; 255
    137e:	fe 01       	movw	r30, r28
    1380:	e9 58       	subi	r30, 0x89	; 137
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	80 81       	ld	r24, Z
    1386:	91 81       	ldd	r25, Z+1	; 0x01
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	11 96       	adiw	r26, 0x01	; 1
    138c:	9c 93       	st	X, r25
    138e:	8e 93       	st	-X, r24
    1390:	fe 01       	movw	r30, r28
    1392:	e9 58       	subi	r30, 0x89	; 137
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	80 81       	ld	r24, Z
    1398:	91 81       	ldd	r25, Z+1	; 0x01
    139a:	84 30       	cpi	r24, 0x04	; 4
    139c:	91 05       	cpc	r25, r1
    139e:	ec f2       	brlt	.-70     	; 0x135a <main+0x6cc>
    13a0:	2b c2       	rjmp	.+1110   	; 0x17f8 <main+0xb6a>
				old_password[i] = UART_recieveByte();
			}

		    while((count_error<3) && (password_check!=1))
		    {
		    	password_check = 1;
    13a2:	fe 01       	movw	r30, r28
    13a4:	e3 58       	subi	r30, 0x83	; 131
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	80 83       	st	Z, r24
				LCD_clearScreen();
    13ac:	0e 94 fd 14 	call	0x29fa	; 0x29fa <LCD_clearScreen>
				LCD_displayString("Enter old");
    13b0:	89 ec       	ldi	r24, 0xC9	; 201
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>
			    LCD_goToRowColumn(1,0);
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	0e 94 b5 13 	call	0x276a	; 0x276a <LCD_goToRowColumn>
			    LCD_displayString("password: ");
    13c0:	83 ed       	ldi	r24, 0xD3	; 211
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>

			    for(int i=0;i<4;i++)
    13c8:	fe 01       	movw	r30, r28
    13ca:	eb 58       	subi	r30, 0x8B	; 139
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	11 82       	std	Z+1, r1	; 0x01
    13d0:	10 82       	st	Z, r1
    13d2:	b3 c0       	rjmp	.+358    	; 0x153a <main+0x8ac>
    13d4:	fe 01       	movw	r30, r28
    13d6:	ed 5b       	subi	r30, 0xBD	; 189
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	a6 e9       	ldi	r26, 0x96	; 150
    13e0:	b3 e4       	ldi	r27, 0x43	; 67
    13e2:	80 83       	st	Z, r24
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	a2 83       	std	Z+2, r26	; 0x02
    13e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ea:	8e 01       	movw	r16, r28
    13ec:	01 5c       	subi	r16, 0xC1	; 193
    13ee:	1f 4f       	sbci	r17, 0xFF	; 255
    13f0:	fe 01       	movw	r30, r28
    13f2:	ed 5b       	subi	r30, 0xBD	; 189
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	60 81       	ld	r22, Z
    13f8:	71 81       	ldd	r23, Z+1	; 0x01
    13fa:	82 81       	ldd	r24, Z+2	; 0x02
    13fc:	93 81       	ldd	r25, Z+3	; 0x03
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	4a ef       	ldi	r20, 0xFA	; 250
    1404:	54 e4       	ldi	r21, 0x44	; 68
    1406:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	f8 01       	movw	r30, r16
    1410:	80 83       	st	Z, r24
    1412:	91 83       	std	Z+1, r25	; 0x01
    1414:	a2 83       	std	Z+2, r26	; 0x02
    1416:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1418:	fe 01       	movw	r30, r28
    141a:	ff 96       	adiw	r30, 0x3f	; 63
    141c:	60 81       	ld	r22, Z
    141e:	71 81       	ldd	r23, Z+1	; 0x01
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	93 81       	ldd	r25, Z+3	; 0x03
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e8       	ldi	r20, 0x80	; 128
    142a:	5f e3       	ldi	r21, 0x3F	; 63
    142c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1430:	88 23       	and	r24, r24
    1432:	2c f4       	brge	.+10     	; 0x143e <main+0x7b0>
		__ticks = 1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9e af       	std	Y+62, r25	; 0x3e
    143a:	8d af       	std	Y+61, r24	; 0x3d
    143c:	46 c0       	rjmp	.+140    	; 0x14ca <main+0x83c>
	else if (__tmp > 65535)
    143e:	fe 01       	movw	r30, r28
    1440:	ff 96       	adiw	r30, 0x3f	; 63
    1442:	60 81       	ld	r22, Z
    1444:	71 81       	ldd	r23, Z+1	; 0x01
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	3f ef       	ldi	r19, 0xFF	; 255
    144e:	4f e7       	ldi	r20, 0x7F	; 127
    1450:	57 e4       	ldi	r21, 0x47	; 71
    1452:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1456:	18 16       	cp	r1, r24
    1458:	64 f5       	brge	.+88     	; 0x14b2 <main+0x824>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145a:	fe 01       	movw	r30, r28
    145c:	ed 5b       	subi	r30, 0xBD	; 189
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	60 81       	ld	r22, Z
    1462:	71 81       	ldd	r23, Z+1	; 0x01
    1464:	82 81       	ldd	r24, Z+2	; 0x02
    1466:	93 81       	ldd	r25, Z+3	; 0x03
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	40 e2       	ldi	r20, 0x20	; 32
    146e:	51 e4       	ldi	r21, 0x41	; 65
    1470:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	bc 01       	movw	r22, r24
    147a:	cd 01       	movw	r24, r26
    147c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	9e af       	std	Y+62, r25	; 0x3e
    1486:	8d af       	std	Y+61, r24	; 0x3d
    1488:	0f c0       	rjmp	.+30     	; 0x14a8 <main+0x81a>
    148a:	88 ec       	ldi	r24, 0xC8	; 200
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	9c af       	std	Y+60, r25	; 0x3c
    1490:	8b af       	std	Y+59, r24	; 0x3b
    1492:	8b ad       	ldd	r24, Y+59	; 0x3b
    1494:	9c ad       	ldd	r25, Y+60	; 0x3c
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <main+0x808>
    149a:	9c af       	std	Y+60, r25	; 0x3c
    149c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149e:	8d ad       	ldd	r24, Y+61	; 0x3d
    14a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	9e af       	std	Y+62, r25	; 0x3e
    14a6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    14aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	69 f7       	brne	.-38     	; 0x148a <main+0x7fc>
    14b0:	16 c0       	rjmp	.+44     	; 0x14de <main+0x850>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b2:	fe 01       	movw	r30, r28
    14b4:	ff 96       	adiw	r30, 0x3f	; 63
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	93 81       	ldd	r25, Z+3	; 0x03
    14be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9e af       	std	Y+62, r25	; 0x3e
    14c8:	8d af       	std	Y+61, r24	; 0x3d
    14ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    14cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    14ce:	9a af       	std	Y+58, r25	; 0x3a
    14d0:	89 af       	std	Y+57, r24	; 0x39
    14d2:	89 ad       	ldd	r24, Y+57	; 0x39
    14d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <main+0x848>
    14da:	9a af       	std	Y+58, r25	; 0x3a
    14dc:	89 af       	std	Y+57, r24	; 0x39
			    {
			    	_delay_ms(300);
					key = KeyPad_getPressedKey();
    14de:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <KeyPad_getPressedKey>
    14e2:	fe 01       	movw	r30, r28
    14e4:	e0 58       	subi	r30, 0x80	; 128
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	80 83       	st	Z, r24
					LCD_intgerToString(key);
    14ea:	fe 01       	movw	r30, r28
    14ec:	e0 58       	subi	r30, 0x80	; 128
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	80 81       	ld	r24, Z
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a0 e0       	ldi	r26, 0x00	; 0
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	bc 01       	movw	r22, r24
    14fc:	cd 01       	movw	r24, r26
    14fe:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_intgerToString>
				    entered_password[i] = key;
    1502:	fe 01       	movw	r30, r28
    1504:	eb 58       	subi	r30, 0x8B	; 139
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	20 81       	ld	r18, Z
    150a:	31 81       	ldd	r19, Z+1	; 0x01
    150c:	ce 01       	movw	r24, r28
    150e:	8f 57       	subi	r24, 0x7F	; 127
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	dc 01       	movw	r26, r24
    1514:	a2 0f       	add	r26, r18
    1516:	b3 1f       	adc	r27, r19
    1518:	fe 01       	movw	r30, r28
    151a:	e0 58       	subi	r30, 0x80	; 128
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	80 81       	ld	r24, Z
    1520:	8c 93       	st	X, r24
				LCD_clearScreen();
				LCD_displayString("Enter old");
			    LCD_goToRowColumn(1,0);
			    LCD_displayString("password: ");

			    for(int i=0;i<4;i++)
    1522:	de 01       	movw	r26, r28
    1524:	ab 58       	subi	r26, 0x8B	; 139
    1526:	bf 4f       	sbci	r27, 0xFF	; 255
    1528:	fe 01       	movw	r30, r28
    152a:	eb 58       	subi	r30, 0x8B	; 139
    152c:	ff 4f       	sbci	r31, 0xFF	; 255
    152e:	80 81       	ld	r24, Z
    1530:	91 81       	ldd	r25, Z+1	; 0x01
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	11 96       	adiw	r26, 0x01	; 1
    1536:	9c 93       	st	X, r25
    1538:	8e 93       	st	-X, r24
    153a:	fe 01       	movw	r30, r28
    153c:	eb 58       	subi	r30, 0x8B	; 139
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	80 81       	ld	r24, Z
    1542:	91 81       	ldd	r25, Z+1	; 0x01
    1544:	84 30       	cpi	r24, 0x04	; 4
    1546:	91 05       	cpc	r25, r1
    1548:	0c f4       	brge	.+2      	; 0x154c <main+0x8be>
    154a:	44 cf       	rjmp	.-376    	; 0x13d4 <main+0x746>
			    	_delay_ms(300);
					key = KeyPad_getPressedKey();
					LCD_intgerToString(key);
				    entered_password[i] = key;
			    }
				for(int i=0; i<4; i++)
    154c:	fe 01       	movw	r30, r28
    154e:	ed 58       	subi	r30, 0x8D	; 141
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	11 82       	std	Z+1, r1	; 0x01
    1554:	10 82       	st	Z, r1
    1556:	47 c1       	rjmp	.+654    	; 0x17e6 <main+0xb58>
				{
					if(old_password[i]!=entered_password[i])
    1558:	fe 01       	movw	r30, r28
    155a:	ed 58       	subi	r30, 0x8D	; 141
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	20 81       	ld	r18, Z
    1560:	31 81       	ldd	r19, Z+1	; 0x01
    1562:	ce 01       	movw	r24, r28
    1564:	8b 57       	subi	r24, 0x7B	; 123
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	fc 01       	movw	r30, r24
    156a:	e2 0f       	add	r30, r18
    156c:	f3 1f       	adc	r31, r19
    156e:	40 81       	ld	r20, Z
    1570:	fe 01       	movw	r30, r28
    1572:	ed 58       	subi	r30, 0x8D	; 141
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	20 81       	ld	r18, Z
    1578:	31 81       	ldd	r19, Z+1	; 0x01
    157a:	ce 01       	movw	r24, r28
    157c:	8f 57       	subi	r24, 0x7F	; 127
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	fc 01       	movw	r30, r24
    1582:	e2 0f       	add	r30, r18
    1584:	f3 1f       	adc	r31, r19
    1586:	80 81       	ld	r24, Z
    1588:	48 17       	cp	r20, r24
    158a:	09 f4       	brne	.+2      	; 0x158e <main+0x900>
    158c:	20 c1       	rjmp	.+576    	; 0x17ce <main+0xb40>
					{
						count_error++;
    158e:	de 01       	movw	r26, r28
    1590:	a2 58       	subi	r26, 0x82	; 130
    1592:	bf 4f       	sbci	r27, 0xFF	; 255
    1594:	fe 01       	movw	r30, r28
    1596:	e2 58       	subi	r30, 0x82	; 130
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	80 81       	ld	r24, Z
    159c:	8f 5f       	subi	r24, 0xFF	; 255
    159e:	8c 93       	st	X, r24

						if(count_error==3)
    15a0:	fe 01       	movw	r30, r28
    15a2:	e2 58       	subi	r30, 0x82	; 130
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	80 81       	ld	r24, Z
    15a8:	83 30       	cpi	r24, 0x03	; 3
    15aa:	09 f0       	breq	.+2      	; 0x15ae <main+0x920>
    15ac:	93 c0       	rjmp	.+294    	; 0x16d4 <main+0xa46>
						{
							password_check = 0;
    15ae:	fe 01       	movw	r30, r28
    15b0:	e3 58       	subi	r30, 0x83	; 131
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	10 82       	st	Z, r1
							LCD_clearScreen();
    15b6:	0e 94 fd 14 	call	0x29fa	; 0x29fa <LCD_clearScreen>
							LCD_displayString("lock_system");
    15ba:	85 ea       	ldi	r24, 0xA5	; 165
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>
							LCD_goToRowColumn(1,0);
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	0e 94 b5 13 	call	0x276a	; 0x276a <LCD_goToRowColumn>
							LCD_displayString("for");
    15ca:	81 eb       	ldi	r24, 0xB1	; 177
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>
						    LCD_goToRowColumn(1,4);
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	64 e0       	ldi	r22, 0x04	; 4
    15d6:	0e 94 b5 13 	call	0x276a	; 0x276a <LCD_goToRowColumn>
							LCD_intgerToString(10);
    15da:	6a e0       	ldi	r22, 0x0A	; 10
    15dc:	70 e0       	ldi	r23, 0x00	; 0
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_intgerToString>
							LCD_displayString(" sec");
    15e6:	85 eb       	ldi	r24, 0xB5	; 181
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e4       	ldi	r25, 0x40	; 64
    15f2:	ac e1       	ldi	r26, 0x1C	; 28
    15f4:	b6 e4       	ldi	r27, 0x46	; 70
    15f6:	8d ab       	std	Y+53, r24	; 0x35
    15f8:	9e ab       	std	Y+54, r25	; 0x36
    15fa:	af ab       	std	Y+55, r26	; 0x37
    15fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1600:	7e a9       	ldd	r23, Y+54	; 0x36
    1602:	8f a9       	ldd	r24, Y+55	; 0x37
    1604:	98 ad       	ldd	r25, Y+56	; 0x38
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	4a ef       	ldi	r20, 0xFA	; 250
    160c:	54 e4       	ldi	r21, 0x44	; 68
    160e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	89 ab       	std	Y+49, r24	; 0x31
    1618:	9a ab       	std	Y+50, r25	; 0x32
    161a:	ab ab       	std	Y+51, r26	; 0x33
    161c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    161e:	69 a9       	ldd	r22, Y+49	; 0x31
    1620:	7a a9       	ldd	r23, Y+50	; 0x32
    1622:	8b a9       	ldd	r24, Y+51	; 0x33
    1624:	9c a9       	ldd	r25, Y+52	; 0x34
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e8       	ldi	r20, 0x80	; 128
    162c:	5f e3       	ldi	r21, 0x3F	; 63
    162e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1632:	88 23       	and	r24, r24
    1634:	2c f4       	brge	.+10     	; 0x1640 <main+0x9b2>
		__ticks = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	98 ab       	std	Y+48, r25	; 0x30
    163c:	8f a7       	std	Y+47, r24	; 0x2f
    163e:	3f c0       	rjmp	.+126    	; 0x16be <main+0xa30>
	else if (__tmp > 65535)
    1640:	69 a9       	ldd	r22, Y+49	; 0x31
    1642:	7a a9       	ldd	r23, Y+50	; 0x32
    1644:	8b a9       	ldd	r24, Y+51	; 0x33
    1646:	9c a9       	ldd	r25, Y+52	; 0x34
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	3f ef       	ldi	r19, 0xFF	; 255
    164c:	4f e7       	ldi	r20, 0x7F	; 127
    164e:	57 e4       	ldi	r21, 0x47	; 71
    1650:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1654:	18 16       	cp	r1, r24
    1656:	4c f5       	brge	.+82     	; 0x16aa <main+0xa1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1658:	6d a9       	ldd	r22, Y+53	; 0x35
    165a:	7e a9       	ldd	r23, Y+54	; 0x36
    165c:	8f a9       	ldd	r24, Y+55	; 0x37
    165e:	98 ad       	ldd	r25, Y+56	; 0x38
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e2       	ldi	r20, 0x20	; 32
    1666:	51 e4       	ldi	r21, 0x41	; 65
    1668:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	98 ab       	std	Y+48, r25	; 0x30
    167e:	8f a7       	std	Y+47, r24	; 0x2f
    1680:	0f c0       	rjmp	.+30     	; 0x16a0 <main+0xa12>
    1682:	88 ec       	ldi	r24, 0xC8	; 200
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9e a7       	std	Y+46, r25	; 0x2e
    1688:	8d a7       	std	Y+45, r24	; 0x2d
    168a:	8d a5       	ldd	r24, Y+45	; 0x2d
    168c:	9e a5       	ldd	r25, Y+46	; 0x2e
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <main+0xa00>
    1692:	9e a7       	std	Y+46, r25	; 0x2e
    1694:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1696:	8f a5       	ldd	r24, Y+47	; 0x2f
    1698:	98 a9       	ldd	r25, Y+48	; 0x30
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	98 ab       	std	Y+48, r25	; 0x30
    169e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a2:	98 a9       	ldd	r25, Y+48	; 0x30
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	69 f7       	brne	.-38     	; 0x1682 <main+0x9f4>
    16a8:	a7 c0       	rjmp	.+334    	; 0x17f8 <main+0xb6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16aa:	69 a9       	ldd	r22, Y+49	; 0x31
    16ac:	7a a9       	ldd	r23, Y+50	; 0x32
    16ae:	8b a9       	ldd	r24, Y+51	; 0x33
    16b0:	9c a9       	ldd	r25, Y+52	; 0x34
    16b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	98 ab       	std	Y+48, r25	; 0x30
    16bc:	8f a7       	std	Y+47, r24	; 0x2f
    16be:	8f a5       	ldd	r24, Y+47	; 0x2f
    16c0:	98 a9       	ldd	r25, Y+48	; 0x30
    16c2:	9c a7       	std	Y+44, r25	; 0x2c
    16c4:	8b a7       	std	Y+43, r24	; 0x2b
    16c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    16c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <main+0xa3c>
    16ce:	9c a7       	std	Y+44, r25	; 0x2c
    16d0:	8b a7       	std	Y+43, r24	; 0x2b
    16d2:	92 c0       	rjmp	.+292    	; 0x17f8 <main+0xb6a>
							_delay_ms(10000);
							break;
						}
						else
						{
							password_check = 0;
    16d4:	fe 01       	movw	r30, r28
    16d6:	e3 58       	subi	r30, 0x83	; 131
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	10 82       	st	Z, r1
							LCD_clearScreen();
    16dc:	0e 94 fd 14 	call	0x29fa	; 0x29fa <LCD_clearScreen>
							LCD_displayString("wrong!");
    16e0:	8e ed       	ldi	r24, 0xDE	; 222
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	aa e7       	ldi	r26, 0x7A	; 122
    16ee:	b4 e4       	ldi	r27, 0x44	; 68
    16f0:	8f a3       	std	Y+39, r24	; 0x27
    16f2:	98 a7       	std	Y+40, r25	; 0x28
    16f4:	a9 a7       	std	Y+41, r26	; 0x29
    16f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f8:	6f a1       	ldd	r22, Y+39	; 0x27
    16fa:	78 a5       	ldd	r23, Y+40	; 0x28
    16fc:	89 a5       	ldd	r24, Y+41	; 0x29
    16fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	4a ef       	ldi	r20, 0xFA	; 250
    1706:	54 e4       	ldi	r21, 0x44	; 68
    1708:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	8b a3       	std	Y+35, r24	; 0x23
    1712:	9c a3       	std	Y+36, r25	; 0x24
    1714:	ad a3       	std	Y+37, r26	; 0x25
    1716:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1718:	6b a1       	ldd	r22, Y+35	; 0x23
    171a:	7c a1       	ldd	r23, Y+36	; 0x24
    171c:	8d a1       	ldd	r24, Y+37	; 0x25
    171e:	9e a1       	ldd	r25, Y+38	; 0x26
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e8       	ldi	r20, 0x80	; 128
    1726:	5f e3       	ldi	r21, 0x3F	; 63
    1728:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    172c:	88 23       	and	r24, r24
    172e:	2c f4       	brge	.+10     	; 0x173a <main+0xaac>
		__ticks = 1;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	9a a3       	std	Y+34, r25	; 0x22
    1736:	89 a3       	std	Y+33, r24	; 0x21
    1738:	3f c0       	rjmp	.+126    	; 0x17b8 <main+0xb2a>
	else if (__tmp > 65535)
    173a:	6b a1       	ldd	r22, Y+35	; 0x23
    173c:	7c a1       	ldd	r23, Y+36	; 0x24
    173e:	8d a1       	ldd	r24, Y+37	; 0x25
    1740:	9e a1       	ldd	r25, Y+38	; 0x26
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	3f ef       	ldi	r19, 0xFF	; 255
    1746:	4f e7       	ldi	r20, 0x7F	; 127
    1748:	57 e4       	ldi	r21, 0x47	; 71
    174a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    174e:	18 16       	cp	r1, r24
    1750:	4c f5       	brge	.+82     	; 0x17a4 <main+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1752:	6f a1       	ldd	r22, Y+39	; 0x27
    1754:	78 a5       	ldd	r23, Y+40	; 0x28
    1756:	89 a5       	ldd	r24, Y+41	; 0x29
    1758:	9a a5       	ldd	r25, Y+42	; 0x2a
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e2       	ldi	r20, 0x20	; 32
    1760:	51 e4       	ldi	r21, 0x41	; 65
    1762:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	bc 01       	movw	r22, r24
    176c:	cd 01       	movw	r24, r26
    176e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	9a a3       	std	Y+34, r25	; 0x22
    1778:	89 a3       	std	Y+33, r24	; 0x21
    177a:	0f c0       	rjmp	.+30     	; 0x179a <main+0xb0c>
    177c:	88 ec       	ldi	r24, 0xC8	; 200
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	98 a3       	std	Y+32, r25	; 0x20
    1782:	8f 8f       	std	Y+31, r24	; 0x1f
    1784:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1786:	98 a1       	ldd	r25, Y+32	; 0x20
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <main+0xafa>
    178c:	98 a3       	std	Y+32, r25	; 0x20
    178e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1790:	89 a1       	ldd	r24, Y+33	; 0x21
    1792:	9a a1       	ldd	r25, Y+34	; 0x22
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	9a a3       	std	Y+34, r25	; 0x22
    1798:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179a:	89 a1       	ldd	r24, Y+33	; 0x21
    179c:	9a a1       	ldd	r25, Y+34	; 0x22
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	69 f7       	brne	.-38     	; 0x177c <main+0xaee>
    17a2:	2a c0       	rjmp	.+84     	; 0x17f8 <main+0xb6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a4:	6b a1       	ldd	r22, Y+35	; 0x23
    17a6:	7c a1       	ldd	r23, Y+36	; 0x24
    17a8:	8d a1       	ldd	r24, Y+37	; 0x25
    17aa:	9e a1       	ldd	r25, Y+38	; 0x26
    17ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	9a a3       	std	Y+34, r25	; 0x22
    17b6:	89 a3       	std	Y+33, r24	; 0x21
    17b8:	89 a1       	ldd	r24, Y+33	; 0x21
    17ba:	9a a1       	ldd	r25, Y+34	; 0x22
    17bc:	9e 8f       	std	Y+30, r25	; 0x1e
    17be:	8d 8f       	std	Y+29, r24	; 0x1d
    17c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <main+0xb36>
    17c8:	9e 8f       	std	Y+30, r25	; 0x1e
    17ca:	8d 8f       	std	Y+29, r24	; 0x1d
    17cc:	15 c0       	rjmp	.+42     	; 0x17f8 <main+0xb6a>
			    	_delay_ms(300);
					key = KeyPad_getPressedKey();
					LCD_intgerToString(key);
				    entered_password[i] = key;
			    }
				for(int i=0; i<4; i++)
    17ce:	de 01       	movw	r26, r28
    17d0:	ad 58       	subi	r26, 0x8D	; 141
    17d2:	bf 4f       	sbci	r27, 0xFF	; 255
    17d4:	fe 01       	movw	r30, r28
    17d6:	ed 58       	subi	r30, 0x8D	; 141
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	80 81       	ld	r24, Z
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	11 96       	adiw	r26, 0x01	; 1
    17e2:	9c 93       	st	X, r25
    17e4:	8e 93       	st	-X, r24
    17e6:	fe 01       	movw	r30, r28
    17e8:	ed 58       	subi	r30, 0x8D	; 141
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	80 81       	ld	r24, Z
    17ee:	91 81       	ldd	r25, Z+1	; 0x01
    17f0:	84 30       	cpi	r24, 0x04	; 4
    17f2:	91 05       	cpc	r25, r1
    17f4:	0c f4       	brge	.+2      	; 0x17f8 <main+0xb6a>
    17f6:	b0 ce       	rjmp	.-672    	; 0x1558 <main+0x8ca>
			for(int i=0; i<4; i++)
			{
				old_password[i] = UART_recieveByte();
			}

		    while((count_error<3) && (password_check!=1))
    17f8:	fe 01       	movw	r30, r28
    17fa:	e2 58       	subi	r30, 0x82	; 130
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	80 81       	ld	r24, Z
    1800:	83 30       	cpi	r24, 0x03	; 3
    1802:	38 f4       	brcc	.+14     	; 0x1812 <main+0xb84>
    1804:	fe 01       	movw	r30, r28
    1806:	e3 58       	subi	r30, 0x83	; 131
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	80 81       	ld	r24, Z
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	09 f0       	breq	.+2      	; 0x1812 <main+0xb84>
    1810:	c8 cd       	rjmp	.-1136   	; 0x13a2 <main+0x714>
						}
					}
				}
		    }

			if(password_check==1)
    1812:	fe 01       	movw	r30, r28
    1814:	e3 58       	subi	r30, 0x83	; 131
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	80 81       	ld	r24, Z
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	09 f0       	breq	.+2      	; 0x1820 <main+0xb92>
    181e:	31 c1       	rjmp	.+610    	; 0x1a82 <main+0xdf4>
			{
				password_check=0;
    1820:	fe 01       	movw	r30, r28
    1822:	e3 58       	subi	r30, 0x83	; 131
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	10 82       	st	Z, r1
				count_error = 0;
    1828:	fe 01       	movw	r30, r28
    182a:	e2 58       	subi	r30, 0x82	; 130
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	10 82       	st	Z, r1
				UART_sendByte(password_chaneged);
    1830:	85 e1       	ldi	r24, 0x15	; 21
    1832:	0e 94 00 16 	call	0x2c00	; 0x2c00 <UART_sendByte>
				LCD_clearScreen();
    1836:	0e 94 fd 14 	call	0x29fa	; 0x29fa <LCD_clearScreen>
				LCD_displayString("new password:");
    183a:	85 ee       	ldi	r24, 0xE5	; 229
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>
			    LCD_goToRowColumn(1,0);
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	0e 94 b5 13 	call	0x276a	; 0x276a <LCD_goToRowColumn>

			    for(int i=0;i<4;i++)
    184a:	fe 01       	movw	r30, r28
    184c:	ef 58       	subi	r30, 0x8F	; 143
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	11 82       	std	Z+1, r1	; 0x01
    1852:	10 82       	st	Z, r1
    1854:	96 c0       	rjmp	.+300    	; 0x1982 <main+0xcf4>
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	a6 e9       	ldi	r26, 0x96	; 150
    185c:	b3 e4       	ldi	r27, 0x43	; 67
    185e:	89 8f       	std	Y+25, r24	; 0x19
    1860:	9a 8f       	std	Y+26, r25	; 0x1a
    1862:	ab 8f       	std	Y+27, r26	; 0x1b
    1864:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1866:	69 8d       	ldd	r22, Y+25	; 0x19
    1868:	7a 8d       	ldd	r23, Y+26	; 0x1a
    186a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    186c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	4a ef       	ldi	r20, 0xFA	; 250
    1874:	54 e4       	ldi	r21, 0x44	; 68
    1876:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	8d 8b       	std	Y+21, r24	; 0x15
    1880:	9e 8b       	std	Y+22, r25	; 0x16
    1882:	af 8b       	std	Y+23, r26	; 0x17
    1884:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1886:	6d 89       	ldd	r22, Y+21	; 0x15
    1888:	7e 89       	ldd	r23, Y+22	; 0x16
    188a:	8f 89       	ldd	r24, Y+23	; 0x17
    188c:	98 8d       	ldd	r25, Y+24	; 0x18
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e8       	ldi	r20, 0x80	; 128
    1894:	5f e3       	ldi	r21, 0x3F	; 63
    1896:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    189a:	88 23       	and	r24, r24
    189c:	2c f4       	brge	.+10     	; 0x18a8 <main+0xc1a>
		__ticks = 1;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	9c 8b       	std	Y+20, r25	; 0x14
    18a4:	8b 8b       	std	Y+19, r24	; 0x13
    18a6:	3f c0       	rjmp	.+126    	; 0x1926 <main+0xc98>
	else if (__tmp > 65535)
    18a8:	6d 89       	ldd	r22, Y+21	; 0x15
    18aa:	7e 89       	ldd	r23, Y+22	; 0x16
    18ac:	8f 89       	ldd	r24, Y+23	; 0x17
    18ae:	98 8d       	ldd	r25, Y+24	; 0x18
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	3f ef       	ldi	r19, 0xFF	; 255
    18b4:	4f e7       	ldi	r20, 0x7F	; 127
    18b6:	57 e4       	ldi	r21, 0x47	; 71
    18b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18bc:	18 16       	cp	r1, r24
    18be:	4c f5       	brge	.+82     	; 0x1912 <main+0xc84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c0:	69 8d       	ldd	r22, Y+25	; 0x19
    18c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e2       	ldi	r20, 0x20	; 32
    18ce:	51 e4       	ldi	r21, 0x41	; 65
    18d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9c 8b       	std	Y+20, r25	; 0x14
    18e6:	8b 8b       	std	Y+19, r24	; 0x13
    18e8:	0f c0       	rjmp	.+30     	; 0x1908 <main+0xc7a>
    18ea:	88 ec       	ldi	r24, 0xC8	; 200
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9a 8b       	std	Y+18, r25	; 0x12
    18f0:	89 8b       	std	Y+17, r24	; 0x11
    18f2:	89 89       	ldd	r24, Y+17	; 0x11
    18f4:	9a 89       	ldd	r25, Y+18	; 0x12
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <main+0xc68>
    18fa:	9a 8b       	std	Y+18, r25	; 0x12
    18fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1900:	9c 89       	ldd	r25, Y+20	; 0x14
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	9c 8b       	std	Y+20, r25	; 0x14
    1906:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1908:	8b 89       	ldd	r24, Y+19	; 0x13
    190a:	9c 89       	ldd	r25, Y+20	; 0x14
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	69 f7       	brne	.-38     	; 0x18ea <main+0xc5c>
    1910:	14 c0       	rjmp	.+40     	; 0x193a <main+0xcac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1912:	6d 89       	ldd	r22, Y+21	; 0x15
    1914:	7e 89       	ldd	r23, Y+22	; 0x16
    1916:	8f 89       	ldd	r24, Y+23	; 0x17
    1918:	98 8d       	ldd	r25, Y+24	; 0x18
    191a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9c 8b       	std	Y+20, r25	; 0x14
    1924:	8b 8b       	std	Y+19, r24	; 0x13
    1926:	8b 89       	ldd	r24, Y+19	; 0x13
    1928:	9c 89       	ldd	r25, Y+20	; 0x14
    192a:	98 8b       	std	Y+16, r25	; 0x10
    192c:	8f 87       	std	Y+15, r24	; 0x0f
    192e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1930:	98 89       	ldd	r25, Y+16	; 0x10
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <main+0xca4>
    1936:	98 8b       	std	Y+16, r25	; 0x10
    1938:	8f 87       	std	Y+15, r24	; 0x0f
			    {
			    	_delay_ms(300);
					key = KeyPad_getPressedKey();
    193a:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <KeyPad_getPressedKey>
    193e:	fe 01       	movw	r30, r28
    1940:	e0 58       	subi	r30, 0x80	; 128
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	80 83       	st	Z, r24
					LCD_intgerToString(key);
    1946:	fe 01       	movw	r30, r28
    1948:	e0 58       	subi	r30, 0x80	; 128
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	80 81       	ld	r24, Z
    194e:	88 2f       	mov	r24, r24
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a0 e0       	ldi	r26, 0x00	; 0
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	bc 01       	movw	r22, r24
    1958:	cd 01       	movw	r24, r26
    195a:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_intgerToString>
					UART_sendByte(key);
    195e:	fe 01       	movw	r30, r28
    1960:	e0 58       	subi	r30, 0x80	; 128
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	80 81       	ld	r24, Z
    1966:	0e 94 00 16 	call	0x2c00	; 0x2c00 <UART_sendByte>
				UART_sendByte(password_chaneged);
				LCD_clearScreen();
				LCD_displayString("new password:");
			    LCD_goToRowColumn(1,0);

			    for(int i=0;i<4;i++)
    196a:	de 01       	movw	r26, r28
    196c:	af 58       	subi	r26, 0x8F	; 143
    196e:	bf 4f       	sbci	r27, 0xFF	; 255
    1970:	fe 01       	movw	r30, r28
    1972:	ef 58       	subi	r30, 0x8F	; 143
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	80 81       	ld	r24, Z
    1978:	91 81       	ldd	r25, Z+1	; 0x01
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	11 96       	adiw	r26, 0x01	; 1
    197e:	9c 93       	st	X, r25
    1980:	8e 93       	st	-X, r24
    1982:	fe 01       	movw	r30, r28
    1984:	ef 58       	subi	r30, 0x8F	; 143
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	84 30       	cpi	r24, 0x04	; 4
    198e:	91 05       	cpc	r25, r1
    1990:	0c f4       	brge	.+2      	; 0x1994 <main+0xd06>
    1992:	61 cf       	rjmp	.-318    	; 0x1856 <main+0xbc8>
			    	_delay_ms(300);
					key = KeyPad_getPressedKey();
					LCD_intgerToString(key);
					UART_sendByte(key);
			    }
			    LCD_displayString("  done");
    1994:	83 ef       	ldi	r24, 0xF3	; 243
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	aa e7       	ldi	r26, 0x7A	; 122
    19a2:	b4 e4       	ldi	r27, 0x44	; 68
    19a4:	8b 87       	std	Y+11, r24	; 0x0b
    19a6:	9c 87       	std	Y+12, r25	; 0x0c
    19a8:	ad 87       	std	Y+13, r26	; 0x0d
    19aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	4a ef       	ldi	r20, 0xFA	; 250
    19ba:	54 e4       	ldi	r21, 0x44	; 68
    19bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	8f 83       	std	Y+7, r24	; 0x07
    19c6:	98 87       	std	Y+8, r25	; 0x08
    19c8:	a9 87       	std	Y+9, r26	; 0x09
    19ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19cc:	6f 81       	ldd	r22, Y+7	; 0x07
    19ce:	78 85       	ldd	r23, Y+8	; 0x08
    19d0:	89 85       	ldd	r24, Y+9	; 0x09
    19d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e8       	ldi	r20, 0x80	; 128
    19da:	5f e3       	ldi	r21, 0x3F	; 63
    19dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19e0:	88 23       	and	r24, r24
    19e2:	2c f4       	brge	.+10     	; 0x19ee <main+0xd60>
		__ticks = 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9e 83       	std	Y+6, r25	; 0x06
    19ea:	8d 83       	std	Y+5, r24	; 0x05
    19ec:	3f c0       	rjmp	.+126    	; 0x1a6c <main+0xdde>
	else if (__tmp > 65535)
    19ee:	6f 81       	ldd	r22, Y+7	; 0x07
    19f0:	78 85       	ldd	r23, Y+8	; 0x08
    19f2:	89 85       	ldd	r24, Y+9	; 0x09
    19f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	3f ef       	ldi	r19, 0xFF	; 255
    19fa:	4f e7       	ldi	r20, 0x7F	; 127
    19fc:	57 e4       	ldi	r21, 0x47	; 71
    19fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a02:	18 16       	cp	r1, r24
    1a04:	4c f5       	brge	.+82     	; 0x1a58 <main+0xdca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e2       	ldi	r20, 0x20	; 32
    1a14:	51 e4       	ldi	r21, 0x41	; 65
    1a16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	9e 83       	std	Y+6, r25	; 0x06
    1a2c:	8d 83       	std	Y+5, r24	; 0x05
    1a2e:	0f c0       	rjmp	.+30     	; 0x1a4e <main+0xdc0>
    1a30:	88 ec       	ldi	r24, 0xC8	; 200
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9c 83       	std	Y+4, r25	; 0x04
    1a36:	8b 83       	std	Y+3, r24	; 0x03
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <main+0xdae>
    1a40:	9c 83       	std	Y+4, r25	; 0x04
    1a42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a44:	8d 81       	ldd	r24, Y+5	; 0x05
    1a46:	9e 81       	ldd	r25, Y+6	; 0x06
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	9e 83       	std	Y+6, r25	; 0x06
    1a4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a50:	9e 81       	ldd	r25, Y+6	; 0x06
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	69 f7       	brne	.-38     	; 0x1a30 <main+0xda2>
    1a56:	39 c9       	rjmp	.-3470   	; 0xcca <main+0x3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a58:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5a:	78 85       	ldd	r23, Y+8	; 0x08
    1a5c:	89 85       	ldd	r24, Y+9	; 0x09
    1a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9e 83       	std	Y+6, r25	; 0x06
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
    1a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a70:	9a 83       	std	Y+2, r25	; 0x02
    1a72:	89 83       	std	Y+1, r24	; 0x01
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	9a 81       	ldd	r25, Y+2	; 0x02
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <main+0xdea>
    1a7c:	9a 83       	std	Y+2, r25	; 0x02
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	24 c9       	rjmp	.-3512   	; 0xcca <main+0x3c>
			    _delay_ms(1000);
			}
			else
			{
				count_error = 0;
    1a82:	fe 01       	movw	r30, r28
    1a84:	e2 58       	subi	r30, 0x82	; 130
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	10 82       	st	Z, r1
				UART_sendByte(password_not_chaneged);
    1a8a:	84 e1       	ldi	r24, 0x14	; 20
    1a8c:	0e 94 00 16 	call	0x2c00	; 0x2c00 <UART_sendByte>
    1a90:	1c c9       	rjmp	.-3528   	; 0xcca <main+0x3c>

00001a92 <KeyPad_getPressedKey>:
/***********************************************************
 *             functions definitions
 ***********************************************************/

uint8 KeyPad_getPressedKey(void)
{
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <KeyPad_getPressedKey+0x6>
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
	uint8 row , col;

	while(1)
	{
		for(col=0; col<N_col; col++)
    1a9c:	19 82       	std	Y+1, r1	; 0x01
    1a9e:	4c c0       	rjmp	.+152    	; 0x1b38 <KeyPad_getPressedKey+0xa6>
		{
			KEYPAD_PORT_DIR = (0b00010000<<col);
    1aa0:	ea e3       	ldi	r30, 0x3A	; 58
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	80 e1       	ldi	r24, 0x10	; 16
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <KeyPad_getPressedKey+0x22>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	2a 95       	dec	r18
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <KeyPad_getPressedKey+0x1e>
    1ab8:	80 83       	st	Z, r24
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    1aba:	eb e3       	ldi	r30, 0x3B	; 59
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	80 e1       	ldi	r24, 0x10	; 16
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 2e       	mov	r0, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <KeyPad_getPressedKey+0x3e>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <KeyPad_getPressedKey+0x3a>
    1ad4:	80 95       	com	r24
    1ad6:	80 83       	st	Z, r24
			for(row=0; row<N_row; row++)
    1ad8:	1a 82       	std	Y+2, r1	; 0x02
    1ada:	28 c0       	rjmp	.+80     	; 0x1b2c <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
    1adc:	e9 e3       	ldi	r30, 0x39	; 57
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	88 2f       	mov	r24, r24
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a9 01       	movw	r20, r18
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <KeyPad_getPressedKey+0x62>
    1af0:	55 95       	asr	r21
    1af2:	47 95       	ror	r20
    1af4:	8a 95       	dec	r24
    1af6:	e2 f7       	brpl	.-8      	; 0x1af0 <KeyPad_getPressedKey+0x5e>
    1af8:	ca 01       	movw	r24, r20
    1afa:	81 70       	andi	r24, 0x01	; 1
    1afc:	90 70       	andi	r25, 0x00	; 0
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	91 f4       	brne	.+36     	; 0x1b26 <KeyPad_getPressedKey+0x94>
				{
                    #if (N_col==3)
					    return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
                    #elif (N_col==4)
					    return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	88 2f       	mov	r24, r24
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	98 2f       	mov	r25, r24
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	89 0f       	add	r24, r25
    1b16:	8f 5f       	subi	r24, 0xFF	; 255
    1b18:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <KeyPad_4x4_adjustKeyNumber>
                    #endif
				}
			}
		}
	}
}
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret
	{
		for(col=0; col<N_col; col++)
		{
			KEYPAD_PORT_DIR = (0b00010000<<col);
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
			for(row=0; row<N_row; row++)
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	8f 5f       	subi	r24, 0xFF	; 255
    1b2a:	8a 83       	std	Y+2, r24	; 0x02
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	84 30       	cpi	r24, 0x04	; 4
    1b30:	a8 f2       	brcs	.-86     	; 0x1adc <KeyPad_getPressedKey+0x4a>
{
	uint8 row , col;

	while(1)
	{
		for(col=0; col<N_col; col++)
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	8f 5f       	subi	r24, 0xFF	; 255
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	84 30       	cpi	r24, 0x04	; 4
    1b3c:	08 f4       	brcc	.+2      	; 0x1b40 <KeyPad_getPressedKey+0xae>
    1b3e:	b0 cf       	rjmp	.-160    	; 0x1aa0 <KeyPad_getPressedKey+0xe>
    1b40:	ad cf       	rjmp	.-166    	; 0x1a9c <KeyPad_getPressedKey+0xa>

00001b42 <KeyPad_4x4_adjustKeyNumber>:
	}
}
#elif (N_col == 4)

static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <KeyPad_4x4_adjustKeyNumber+0x6>
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <KeyPad_4x4_adjustKeyNumber+0x8>
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	3c 83       	std	Y+4, r19	; 0x04
    1b58:	2b 83       	std	Y+3, r18	; 0x03
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	88 30       	cpi	r24, 0x08	; 8
    1b60:	91 05       	cpc	r25, r1
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <KeyPad_4x4_adjustKeyNumber+0x24>
    1b64:	70 c0       	rjmp	.+224    	; 0x1c46 <KeyPad_4x4_adjustKeyNumber+0x104>
    1b66:	2b 81       	ldd	r18, Y+3	; 0x03
    1b68:	3c 81       	ldd	r19, Y+4	; 0x04
    1b6a:	29 30       	cpi	r18, 0x09	; 9
    1b6c:	31 05       	cpc	r19, r1
    1b6e:	5c f5       	brge	.+86     	; 0x1bc6 <KeyPad_4x4_adjustKeyNumber+0x84>
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	9c 81       	ldd	r25, Y+4	; 0x04
    1b74:	84 30       	cpi	r24, 0x04	; 4
    1b76:	91 05       	cpc	r25, r1
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <KeyPad_4x4_adjustKeyNumber+0x3a>
    1b7a:	59 c0       	rjmp	.+178    	; 0x1c2e <KeyPad_4x4_adjustKeyNumber+0xec>
    1b7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b80:	25 30       	cpi	r18, 0x05	; 5
    1b82:	31 05       	cpc	r19, r1
    1b84:	9c f4       	brge	.+38     	; 0x1bac <KeyPad_4x4_adjustKeyNumber+0x6a>
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	82 30       	cpi	r24, 0x02	; 2
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <KeyPad_4x4_adjustKeyNumber+0x50>
    1b90:	48 c0       	rjmp	.+144    	; 0x1c22 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1b92:	2b 81       	ldd	r18, Y+3	; 0x03
    1b94:	3c 81       	ldd	r19, Y+4	; 0x04
    1b96:	23 30       	cpi	r18, 0x03	; 3
    1b98:	31 05       	cpc	r19, r1
    1b9a:	0c f0       	brlt	.+2      	; 0x1b9e <KeyPad_4x4_adjustKeyNumber+0x5c>
    1b9c:	45 c0       	rjmp	.+138    	; 0x1c28 <KeyPad_4x4_adjustKeyNumber+0xe6>
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <KeyPad_4x4_adjustKeyNumber+0x68>
    1ba8:	39 c0       	rjmp	.+114    	; 0x1c1c <KeyPad_4x4_adjustKeyNumber+0xda>
    1baa:	67 c0       	rjmp	.+206    	; 0x1c7a <KeyPad_4x4_adjustKeyNumber+0x138>
    1bac:	2b 81       	ldd	r18, Y+3	; 0x03
    1bae:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb0:	26 30       	cpi	r18, 0x06	; 6
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <KeyPad_4x4_adjustKeyNumber+0x76>
    1bb6:	41 c0       	rjmp	.+130    	; 0x1c3a <KeyPad_4x4_adjustKeyNumber+0xf8>
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	87 30       	cpi	r24, 0x07	; 7
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	0c f0       	brlt	.+2      	; 0x1bc4 <KeyPad_4x4_adjustKeyNumber+0x82>
    1bc2:	3e c0       	rjmp	.+124    	; 0x1c40 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1bc4:	37 c0       	rjmp	.+110    	; 0x1c34 <KeyPad_4x4_adjustKeyNumber+0xf2>
    1bc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bca:	2c 30       	cpi	r18, 0x0C	; 12
    1bcc:	31 05       	cpc	r19, r1
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <KeyPad_4x4_adjustKeyNumber+0x90>
    1bd0:	46 c0       	rjmp	.+140    	; 0x1c5e <KeyPad_4x4_adjustKeyNumber+0x11c>
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd6:	8d 30       	cpi	r24, 0x0D	; 13
    1bd8:	91 05       	cpc	r25, r1
    1bda:	5c f4       	brge	.+22     	; 0x1bf2 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1bdc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bde:	3c 81       	ldd	r19, Y+4	; 0x04
    1be0:	2a 30       	cpi	r18, 0x0A	; 10
    1be2:	31 05       	cpc	r19, r1
    1be4:	b1 f1       	breq	.+108    	; 0x1c52 <KeyPad_4x4_adjustKeyNumber+0x110>
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	8b 30       	cpi	r24, 0x0B	; 11
    1bec:	91 05       	cpc	r25, r1
    1bee:	a4 f5       	brge	.+104    	; 0x1c58 <KeyPad_4x4_adjustKeyNumber+0x116>
    1bf0:	2d c0       	rjmp	.+90     	; 0x1c4c <KeyPad_4x4_adjustKeyNumber+0x10a>
    1bf2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf6:	2e 30       	cpi	r18, 0x0E	; 14
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	b9 f1       	breq	.+110    	; 0x1c6a <KeyPad_4x4_adjustKeyNumber+0x128>
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	8e 30       	cpi	r24, 0x0E	; 14
    1c02:	91 05       	cpc	r25, r1
    1c04:	7c f1       	brlt	.+94     	; 0x1c64 <KeyPad_4x4_adjustKeyNumber+0x122>
    1c06:	2b 81       	ldd	r18, Y+3	; 0x03
    1c08:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0a:	2f 30       	cpi	r18, 0x0F	; 15
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	79 f1       	breq	.+94     	; 0x1c6e <KeyPad_4x4_adjustKeyNumber+0x12c>
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	9c 81       	ldd	r25, Y+4	; 0x04
    1c14:	80 31       	cpi	r24, 0x10	; 16
    1c16:	91 05       	cpc	r25, r1
    1c18:	69 f1       	breq	.+90     	; 0x1c74 <KeyPad_4x4_adjustKeyNumber+0x132>
    1c1a:	2f c0       	rjmp	.+94     	; 0x1c7a <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7;
    1c1c:	97 e0       	ldi	r25, 0x07	; 7
    1c1e:	9a 83       	std	Y+2, r25	; 0x02
    1c20:	2e c0       	rjmp	.+92     	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8;
    1c22:	28 e0       	ldi	r18, 0x08	; 8
    1c24:	2a 83       	std	Y+2, r18	; 0x02
    1c26:	2b c0       	rjmp	.+86     	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9;
    1c28:	39 e0       	ldi	r19, 0x09	; 9
    1c2a:	3a 83       	std	Y+2, r19	; 0x02
    1c2c:	28 c0       	rjmp	.+80     	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1c2e:	85 e2       	ldi	r24, 0x25	; 37
    1c30:	8a 83       	std	Y+2, r24	; 0x02
    1c32:	25 c0       	rjmp	.+74     	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4;
    1c34:	94 e0       	ldi	r25, 0x04	; 4
    1c36:	9a 83       	std	Y+2, r25	; 0x02
    1c38:	22 c0       	rjmp	.+68     	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1c3a:	25 e0       	ldi	r18, 0x05	; 5
    1c3c:	2a 83       	std	Y+2, r18	; 0x02
    1c3e:	1f c0       	rjmp	.+62     	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6;
    1c40:	36 e0       	ldi	r19, 0x06	; 6
    1c42:	3a 83       	std	Y+2, r19	; 0x02
    1c44:	1c c0       	rjmp	.+56     	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1c46:	8a e2       	ldi	r24, 0x2A	; 42
    1c48:	8a 83       	std	Y+2, r24	; 0x02
    1c4a:	19 c0       	rjmp	.+50     	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 9: return 1;
    1c4c:	91 e0       	ldi	r25, 0x01	; 1
    1c4e:	9a 83       	std	Y+2, r25	; 0x02
    1c50:	16 c0       	rjmp	.+44     	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2;
    1c52:	22 e0       	ldi	r18, 0x02	; 2
    1c54:	2a 83       	std	Y+2, r18	; 0x02
    1c56:	13 c0       	rjmp	.+38     	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3;
    1c58:	33 e0       	ldi	r19, 0x03	; 3
    1c5a:	3a 83       	std	Y+2, r19	; 0x02
    1c5c:	10 c0       	rjmp	.+32     	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1c5e:	8d e2       	ldi	r24, 0x2D	; 45
    1c60:	8a 83       	std	Y+2, r24	; 0x02
    1c62:	0d c0       	rjmp	.+26     	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1c64:	9d e0       	ldi	r25, 0x0D	; 13
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	0a c0       	rjmp	.+20     	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 14: return 0;
    1c6a:	1a 82       	std	Y+2, r1	; 0x02
    1c6c:	08 c0       	rjmp	.+16     	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1c6e:	2d e3       	ldi	r18, 0x3D	; 61
    1c70:	2a 83       	std	Y+2, r18	; 0x02
    1c72:	05 c0       	rjmp	.+10     	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1c74:	3b e2       	ldi	r19, 0x2B	; 43
    1c76:	3a 83       	std	Y+2, r19	; 0x02
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <LCD_init>:
/***********************************************
 *        Functions Definations                *
 **********************************************/

void LCD_init(void)
{
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	cc 54       	subi	r28, 0x4C	; 76
    1c9c:	d0 40       	sbci	r29, 0x00	; 0
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW);
    1ca8:	a4 e3       	ldi	r26, 0x34	; 52
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e4 e3       	ldi	r30, 0x34	; 52
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	87 60       	ori	r24, 0x07	; 7
    1cb4:	8c 93       	st	X, r24
    #if(DATA_BITS_MODE == 4)
       #ifdef UPPER_PORT_PINS
	      LCD_DATA_PORT_DIR |= 0xF0;
    1cb6:	a4 e3       	ldi	r26, 0x34	; 52
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e4 e3       	ldi	r30, 0x34	; 52
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	80 6f       	ori	r24, 0xF0	; 240
    1cc2:	8c 93       	st	X, r24
       #else
	      LCD_DATA_PORT_DIR |= 0x0F;
       #endif
	   LCD_sendCommand(FOUR_BITS_DATA_MODE);
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_sendCommand>
    1cca:	fe 01       	movw	r30, r28
    1ccc:	e7 5b       	subi	r30, 0xB7	; 183
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	ac e0       	ldi	r26, 0x0C	; 12
    1cd6:	b2 e4       	ldi	r27, 0x42	; 66
    1cd8:	80 83       	st	Z, r24
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	a2 83       	std	Z+2, r26	; 0x02
    1cde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce0:	8e 01       	movw	r16, r28
    1ce2:	0b 5b       	subi	r16, 0xBB	; 187
    1ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	e7 5b       	subi	r30, 0xB7	; 183
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	60 81       	ld	r22, Z
    1cee:	71 81       	ldd	r23, Z+1	; 0x01
    1cf0:	82 81       	ldd	r24, Z+2	; 0x02
    1cf2:	93 81       	ldd	r25, Z+3	; 0x03
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	4a ef       	ldi	r20, 0xFA	; 250
    1cfa:	54 e4       	ldi	r21, 0x44	; 68
    1cfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	f8 01       	movw	r30, r16
    1d06:	80 83       	st	Z, r24
    1d08:	91 83       	std	Z+1, r25	; 0x01
    1d0a:	a2 83       	std	Z+2, r26	; 0x02
    1d0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d0e:	fe 01       	movw	r30, r28
    1d10:	eb 5b       	subi	r30, 0xBB	; 187
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	60 81       	ld	r22, Z
    1d16:	71 81       	ldd	r23, Z+1	; 0x01
    1d18:	82 81       	ldd	r24, Z+2	; 0x02
    1d1a:	93 81       	ldd	r25, Z+3	; 0x03
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e8       	ldi	r20, 0x80	; 128
    1d22:	5f e3       	ldi	r21, 0x3F	; 63
    1d24:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d28:	88 23       	and	r24, r24
    1d2a:	44 f4       	brge	.+16     	; 0x1d3c <LCD_init+0xae>
		__ticks = 1;
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ed 5b       	subi	r30, 0xBD	; 189
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	80 83       	st	Z, r24
    1d3a:	64 c0       	rjmp	.+200    	; 0x1e04 <LCD_init+0x176>
	else if (__tmp > 65535)
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	eb 5b       	subi	r30, 0xBB	; 187
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	60 81       	ld	r22, Z
    1d44:	71 81       	ldd	r23, Z+1	; 0x01
    1d46:	82 81       	ldd	r24, Z+2	; 0x02
    1d48:	93 81       	ldd	r25, Z+3	; 0x03
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	3f ef       	ldi	r19, 0xFF	; 255
    1d4e:	4f e7       	ldi	r20, 0x7F	; 127
    1d50:	57 e4       	ldi	r21, 0x47	; 71
    1d52:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d56:	18 16       	cp	r1, r24
    1d58:	0c f0       	brlt	.+2      	; 0x1d5c <LCD_init+0xce>
    1d5a:	43 c0       	rjmp	.+134    	; 0x1de2 <LCD_init+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e7 5b       	subi	r30, 0xB7	; 183
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	60 81       	ld	r22, Z
    1d64:	71 81       	ldd	r23, Z+1	; 0x01
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e2       	ldi	r20, 0x20	; 32
    1d70:	51 e4       	ldi	r21, 0x41	; 65
    1d72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	8e 01       	movw	r16, r28
    1d7c:	0d 5b       	subi	r16, 0xBD	; 189
    1d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	f8 01       	movw	r30, r16
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	80 83       	st	Z, r24
    1d92:	1f c0       	rjmp	.+62     	; 0x1dd2 <LCD_init+0x144>
    1d94:	fe 01       	movw	r30, r28
    1d96:	ef 5b       	subi	r30, 0xBF	; 191
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	88 ec       	ldi	r24, 0xC8	; 200
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	80 83       	st	Z, r24
    1da2:	fe 01       	movw	r30, r28
    1da4:	ef 5b       	subi	r30, 0xBF	; 191
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 81       	ld	r24, Z
    1daa:	91 81       	ldd	r25, Z+1	; 0x01
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <LCD_init+0x11e>
    1db0:	fe 01       	movw	r30, r28
    1db2:	ef 5b       	subi	r30, 0xBF	; 191
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dba:	de 01       	movw	r26, r28
    1dbc:	ad 5b       	subi	r26, 0xBD	; 189
    1dbe:	bf 4f       	sbci	r27, 0xFF	; 255
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	ed 5b       	subi	r30, 0xBD	; 189
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	80 81       	ld	r24, Z
    1dc8:	91 81       	ldd	r25, Z+1	; 0x01
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	11 96       	adiw	r26, 0x01	; 1
    1dce:	9c 93       	st	X, r25
    1dd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ed 5b       	subi	r30, 0xBD	; 189
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	80 81       	ld	r24, Z
    1dda:	91 81       	ldd	r25, Z+1	; 0x01
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	d1 f6       	brne	.-76     	; 0x1d94 <LCD_init+0x106>
    1de0:	24 c0       	rjmp	.+72     	; 0x1e2a <LCD_init+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de2:	8e 01       	movw	r16, r28
    1de4:	0d 5b       	subi	r16, 0xBD	; 189
    1de6:	1f 4f       	sbci	r17, 0xFF	; 255
    1de8:	fe 01       	movw	r30, r28
    1dea:	eb 5b       	subi	r30, 0xBB	; 187
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	f8 01       	movw	r30, r16
    1e00:	91 83       	std	Z+1, r25	; 0x01
    1e02:	80 83       	st	Z, r24
    1e04:	fe 01       	movw	r30, r28
    1e06:	ed 5b       	subi	r30, 0xBD	; 189
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	80 81       	ld	r24, Z
    1e0c:	91 81       	ldd	r25, Z+1	; 0x01
    1e0e:	fe 01       	movw	r30, r28
    1e10:	ff 96       	adiw	r30, 0x3f	; 63
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	80 83       	st	Z, r24
    1e16:	fe 01       	movw	r30, r28
    1e18:	ff 96       	adiw	r30, 0x3f	; 63
    1e1a:	80 81       	ld	r24, Z
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_init+0x190>
    1e22:	fe 01       	movw	r30, r28
    1e24:	ff 96       	adiw	r30, 0x3f	; 63
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	80 83       	st	Z, r24
	   _delay_ms(35);
	   LCD_sendCommand(TWO_LINE_LCD_FOUR_BIT_MODE);
    1e2a:	88 e2       	ldi	r24, 0x28	; 40
    1e2c:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_sendCommand>
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	a0 e2       	ldi	r26, 0x20	; 32
    1e36:	b2 e4       	ldi	r27, 0x42	; 66
    1e38:	8b af       	std	Y+59, r24	; 0x3b
    1e3a:	9c af       	std	Y+60, r25	; 0x3c
    1e3c:	ad af       	std	Y+61, r26	; 0x3d
    1e3e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e40:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e42:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e44:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e46:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e48:	2b ea       	ldi	r18, 0xAB	; 171
    1e4a:	3a ea       	ldi	r19, 0xAA	; 170
    1e4c:	4a e2       	ldi	r20, 0x2A	; 42
    1e4e:	50 e4       	ldi	r21, 0x40	; 64
    1e50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	8f ab       	std	Y+55, r24	; 0x37
    1e5a:	98 af       	std	Y+56, r25	; 0x38
    1e5c:	a9 af       	std	Y+57, r26	; 0x39
    1e5e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1e60:	6f a9       	ldd	r22, Y+55	; 0x37
    1e62:	78 ad       	ldd	r23, Y+56	; 0x38
    1e64:	89 ad       	ldd	r24, Y+57	; 0x39
    1e66:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e8       	ldi	r20, 0x80	; 128
    1e6e:	5f e3       	ldi	r21, 0x3F	; 63
    1e70:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e74:	88 23       	and	r24, r24
    1e76:	1c f4       	brge	.+6      	; 0x1e7e <LCD_init+0x1f0>
		__ticks = 1;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	8e ab       	std	Y+54, r24	; 0x36
    1e7c:	91 c0       	rjmp	.+290    	; 0x1fa0 <LCD_init+0x312>
	else if (__tmp > 255)
    1e7e:	6f a9       	ldd	r22, Y+55	; 0x37
    1e80:	78 ad       	ldd	r23, Y+56	; 0x38
    1e82:	89 ad       	ldd	r24, Y+57	; 0x39
    1e84:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4f e7       	ldi	r20, 0x7F	; 127
    1e8c:	53 e4       	ldi	r21, 0x43	; 67
    1e8e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e92:	18 16       	cp	r1, r24
    1e94:	0c f0       	brlt	.+2      	; 0x1e98 <LCD_init+0x20a>
    1e96:	7b c0       	rjmp	.+246    	; 0x1f8e <LCD_init+0x300>
	{
		_delay_ms(__us / 1000.0);
    1e98:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e9a:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	4a e7       	ldi	r20, 0x7A	; 122
    1ea6:	54 e4       	ldi	r21, 0x44	; 68
    1ea8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	8a ab       	std	Y+50, r24	; 0x32
    1eb2:	9b ab       	std	Y+51, r25	; 0x33
    1eb4:	ac ab       	std	Y+52, r26	; 0x34
    1eb6:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	6a a9       	ldd	r22, Y+50	; 0x32
    1eba:	7b a9       	ldd	r23, Y+51	; 0x33
    1ebc:	8c a9       	ldd	r24, Y+52	; 0x34
    1ebe:	9d a9       	ldd	r25, Y+53	; 0x35
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	4a ef       	ldi	r20, 0xFA	; 250
    1ec6:	54 e4       	ldi	r21, 0x44	; 68
    1ec8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	8e a7       	std	Y+46, r24	; 0x2e
    1ed2:	9f a7       	std	Y+47, r25	; 0x2f
    1ed4:	a8 ab       	std	Y+48, r26	; 0x30
    1ed6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1ed8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1eda:	7f a5       	ldd	r23, Y+47	; 0x2f
    1edc:	88 a9       	ldd	r24, Y+48	; 0x30
    1ede:	99 a9       	ldd	r25, Y+49	; 0x31
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	2c f4       	brge	.+10     	; 0x1efa <LCD_init+0x26c>
		__ticks = 1;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9d a7       	std	Y+45, r25	; 0x2d
    1ef6:	8c a7       	std	Y+44, r24	; 0x2c
    1ef8:	3f c0       	rjmp	.+126    	; 0x1f78 <LCD_init+0x2ea>
	else if (__tmp > 65535)
    1efa:	6e a5       	ldd	r22, Y+46	; 0x2e
    1efc:	7f a5       	ldd	r23, Y+47	; 0x2f
    1efe:	88 a9       	ldd	r24, Y+48	; 0x30
    1f00:	99 a9       	ldd	r25, Y+49	; 0x31
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	3f ef       	ldi	r19, 0xFF	; 255
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	57 e4       	ldi	r21, 0x47	; 71
    1f0a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	4c f5       	brge	.+82     	; 0x1f64 <LCD_init+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f12:	6a a9       	ldd	r22, Y+50	; 0x32
    1f14:	7b a9       	ldd	r23, Y+51	; 0x33
    1f16:	8c a9       	ldd	r24, Y+52	; 0x34
    1f18:	9d a9       	ldd	r25, Y+53	; 0x35
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	51 e4       	ldi	r21, 0x41	; 65
    1f22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9d a7       	std	Y+45, r25	; 0x2d
    1f38:	8c a7       	std	Y+44, r24	; 0x2c
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <LCD_init+0x2cc>
    1f3c:	88 ec       	ldi	r24, 0xC8	; 200
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9b a7       	std	Y+43, r25	; 0x2b
    1f42:	8a a7       	std	Y+42, r24	; 0x2a
    1f44:	8a a5       	ldd	r24, Y+42	; 0x2a
    1f46:	9b a5       	ldd	r25, Y+43	; 0x2b
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <LCD_init+0x2ba>
    1f4c:	9b a7       	std	Y+43, r25	; 0x2b
    1f4e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f52:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	9d a7       	std	Y+45, r25	; 0x2d
    1f58:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f5c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	69 f7       	brne	.-38     	; 0x1f3c <LCD_init+0x2ae>
    1f62:	24 c0       	rjmp	.+72     	; 0x1fac <LCD_init+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f64:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f66:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f68:	88 a9       	ldd	r24, Y+48	; 0x30
    1f6a:	99 a9       	ldd	r25, Y+49	; 0x31
    1f6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9d a7       	std	Y+45, r25	; 0x2d
    1f76:	8c a7       	std	Y+44, r24	; 0x2c
    1f78:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f7a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f7c:	99 a7       	std	Y+41, r25	; 0x29
    1f7e:	88 a7       	std	Y+40, r24	; 0x28
    1f80:	88 a5       	ldd	r24, Y+40	; 0x28
    1f82:	99 a5       	ldd	r25, Y+41	; 0x29
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <LCD_init+0x2f6>
    1f88:	99 a7       	std	Y+41, r25	; 0x29
    1f8a:	88 a7       	std	Y+40, r24	; 0x28
    1f8c:	0f c0       	rjmp	.+30     	; 0x1fac <LCD_init+0x31e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f8e:	6f a9       	ldd	r22, Y+55	; 0x37
    1f90:	78 ad       	ldd	r23, Y+56	; 0x38
    1f92:	89 ad       	ldd	r24, Y+57	; 0x39
    1f94:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	8e ab       	std	Y+54, r24	; 0x36
    1fa0:	8e a9       	ldd	r24, Y+54	; 0x36
    1fa2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fa4:	8f a1       	ldd	r24, Y+39	; 0x27
    1fa6:	8a 95       	dec	r24
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <LCD_init+0x318>
    1faa:	8f a3       	std	Y+39, r24	; 0x27
	      LCD_DATA_PORT_DIR |= 0xFF;
	      _delay_ms(35);
	      LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
    #endif
	_delay_us(40);
	LCD_sendCommand(CURSOR_ON);
    1fac:	8f e0       	ldi	r24, 0x0F	; 15
    1fae:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_sendCommand>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	a0 e2       	ldi	r26, 0x20	; 32
    1fb8:	b2 e4       	ldi	r27, 0x42	; 66
    1fba:	8b a3       	std	Y+35, r24	; 0x23
    1fbc:	9c a3       	std	Y+36, r25	; 0x24
    1fbe:	ad a3       	std	Y+37, r26	; 0x25
    1fc0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fca:	2b ea       	ldi	r18, 0xAB	; 171
    1fcc:	3a ea       	ldi	r19, 0xAA	; 170
    1fce:	4a e2       	ldi	r20, 0x2A	; 42
    1fd0:	50 e4       	ldi	r21, 0x40	; 64
    1fd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8f 8f       	std	Y+31, r24	; 0x1f
    1fdc:	98 a3       	std	Y+32, r25	; 0x20
    1fde:	a9 a3       	std	Y+33, r26	; 0x21
    1fe0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1fe2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1fe4:	78 a1       	ldd	r23, Y+32	; 0x20
    1fe6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fe8:	9a a1       	ldd	r25, Y+34	; 0x22
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ff6:	88 23       	and	r24, r24
    1ff8:	1c f4       	brge	.+6      	; 0x2000 <LCD_init+0x372>
		__ticks = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	8e 8f       	std	Y+30, r24	; 0x1e
    1ffe:	91 c0       	rjmp	.+290    	; 0x2122 <LCD_init+0x494>
	else if (__tmp > 255)
    2000:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2002:	78 a1       	ldd	r23, Y+32	; 0x20
    2004:	89 a1       	ldd	r24, Y+33	; 0x21
    2006:	9a a1       	ldd	r25, Y+34	; 0x22
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4f e7       	ldi	r20, 0x7F	; 127
    200e:	53 e4       	ldi	r21, 0x43	; 67
    2010:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2014:	18 16       	cp	r1, r24
    2016:	0c f0       	brlt	.+2      	; 0x201a <LCD_init+0x38c>
    2018:	7b c0       	rjmp	.+246    	; 0x2110 <LCD_init+0x482>
	{
		_delay_ms(__us / 1000.0);
    201a:	6b a1       	ldd	r22, Y+35	; 0x23
    201c:	7c a1       	ldd	r23, Y+36	; 0x24
    201e:	8d a1       	ldd	r24, Y+37	; 0x25
    2020:	9e a1       	ldd	r25, Y+38	; 0x26
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	4a e7       	ldi	r20, 0x7A	; 122
    2028:	54 e4       	ldi	r21, 0x44	; 68
    202a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	8a 8f       	std	Y+26, r24	; 0x1a
    2034:	9b 8f       	std	Y+27, r25	; 0x1b
    2036:	ac 8f       	std	Y+28, r26	; 0x1c
    2038:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    203c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    203e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2040:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4a ef       	ldi	r20, 0xFA	; 250
    2048:	54 e4       	ldi	r21, 0x44	; 68
    204a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	8e 8b       	std	Y+22, r24	; 0x16
    2054:	9f 8b       	std	Y+23, r25	; 0x17
    2056:	a8 8f       	std	Y+24, r26	; 0x18
    2058:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    205a:	6e 89       	ldd	r22, Y+22	; 0x16
    205c:	7f 89       	ldd	r23, Y+23	; 0x17
    205e:	88 8d       	ldd	r24, Y+24	; 0x18
    2060:	99 8d       	ldd	r25, Y+25	; 0x19
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e8       	ldi	r20, 0x80	; 128
    2068:	5f e3       	ldi	r21, 0x3F	; 63
    206a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    206e:	88 23       	and	r24, r24
    2070:	2c f4       	brge	.+10     	; 0x207c <LCD_init+0x3ee>
		__ticks = 1;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9d 8b       	std	Y+21, r25	; 0x15
    2078:	8c 8b       	std	Y+20, r24	; 0x14
    207a:	3f c0       	rjmp	.+126    	; 0x20fa <LCD_init+0x46c>
	else if (__tmp > 65535)
    207c:	6e 89       	ldd	r22, Y+22	; 0x16
    207e:	7f 89       	ldd	r23, Y+23	; 0x17
    2080:	88 8d       	ldd	r24, Y+24	; 0x18
    2082:	99 8d       	ldd	r25, Y+25	; 0x19
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	3f ef       	ldi	r19, 0xFF	; 255
    2088:	4f e7       	ldi	r20, 0x7F	; 127
    208a:	57 e4       	ldi	r21, 0x47	; 71
    208c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2090:	18 16       	cp	r1, r24
    2092:	4c f5       	brge	.+82     	; 0x20e6 <LCD_init+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2094:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2096:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2098:	8c 8d       	ldd	r24, Y+28	; 0x1c
    209a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e2       	ldi	r20, 0x20	; 32
    20a2:	51 e4       	ldi	r21, 0x41	; 65
    20a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9d 8b       	std	Y+21, r25	; 0x15
    20ba:	8c 8b       	std	Y+20, r24	; 0x14
    20bc:	0f c0       	rjmp	.+30     	; 0x20dc <LCD_init+0x44e>
    20be:	88 ec       	ldi	r24, 0xC8	; 200
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9b 8b       	std	Y+19, r25	; 0x13
    20c4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20c6:	8a 89       	ldd	r24, Y+18	; 0x12
    20c8:	9b 89       	ldd	r25, Y+19	; 0x13
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_init+0x43c>
    20ce:	9b 8b       	std	Y+19, r25	; 0x13
    20d0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d2:	8c 89       	ldd	r24, Y+20	; 0x14
    20d4:	9d 89       	ldd	r25, Y+21	; 0x15
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	9d 8b       	std	Y+21, r25	; 0x15
    20da:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20dc:	8c 89       	ldd	r24, Y+20	; 0x14
    20de:	9d 89       	ldd	r25, Y+21	; 0x15
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	69 f7       	brne	.-38     	; 0x20be <LCD_init+0x430>
    20e4:	24 c0       	rjmp	.+72     	; 0x212e <LCD_init+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e6:	6e 89       	ldd	r22, Y+22	; 0x16
    20e8:	7f 89       	ldd	r23, Y+23	; 0x17
    20ea:	88 8d       	ldd	r24, Y+24	; 0x18
    20ec:	99 8d       	ldd	r25, Y+25	; 0x19
    20ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9d 8b       	std	Y+21, r25	; 0x15
    20f8:	8c 8b       	std	Y+20, r24	; 0x14
    20fa:	8c 89       	ldd	r24, Y+20	; 0x14
    20fc:	9d 89       	ldd	r25, Y+21	; 0x15
    20fe:	99 8b       	std	Y+17, r25	; 0x11
    2100:	88 8b       	std	Y+16, r24	; 0x10
    2102:	88 89       	ldd	r24, Y+16	; 0x10
    2104:	99 89       	ldd	r25, Y+17	; 0x11
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <LCD_init+0x478>
    210a:	99 8b       	std	Y+17, r25	; 0x11
    210c:	88 8b       	std	Y+16, r24	; 0x10
    210e:	0f c0       	rjmp	.+30     	; 0x212e <LCD_init+0x4a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2110:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2112:	78 a1       	ldd	r23, Y+32	; 0x20
    2114:	89 a1       	ldd	r24, Y+33	; 0x21
    2116:	9a a1       	ldd	r25, Y+34	; 0x22
    2118:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8e 8f       	std	Y+30, r24	; 0x1e
    2122:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2124:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2126:	8f 85       	ldd	r24, Y+15	; 0x0f
    2128:	8a 95       	dec	r24
    212a:	f1 f7       	brne	.-4      	; 0x2128 <LCD_init+0x49a>
    212c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_sendCommand(CLEAR_COMMAND);
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_sendCommand>
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 e0       	ldi	r26, 0x00	; 0
    213a:	b0 e4       	ldi	r27, 0x40	; 64
    213c:	8b 87       	std	Y+11, r24	; 0x0b
    213e:	9c 87       	std	Y+12, r25	; 0x0c
    2140:	ad 87       	std	Y+13, r26	; 0x0d
    2142:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2144:	6b 85       	ldd	r22, Y+11	; 0x0b
    2146:	7c 85       	ldd	r23, Y+12	; 0x0c
    2148:	8d 85       	ldd	r24, Y+13	; 0x0d
    214a:	9e 85       	ldd	r25, Y+14	; 0x0e
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	4a ef       	ldi	r20, 0xFA	; 250
    2152:	54 e4       	ldi	r21, 0x44	; 68
    2154:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	8f 83       	std	Y+7, r24	; 0x07
    215e:	98 87       	std	Y+8, r25	; 0x08
    2160:	a9 87       	std	Y+9, r26	; 0x09
    2162:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2164:	6f 81       	ldd	r22, Y+7	; 0x07
    2166:	78 85       	ldd	r23, Y+8	; 0x08
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2178:	88 23       	and	r24, r24
    217a:	2c f4       	brge	.+10     	; 0x2186 <LCD_init+0x4f8>
		__ticks = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
    2184:	3f c0       	rjmp	.+126    	; 0x2204 <LCD_init+0x576>
	else if (__tmp > 65535)
    2186:	6f 81       	ldd	r22, Y+7	; 0x07
    2188:	78 85       	ldd	r23, Y+8	; 0x08
    218a:	89 85       	ldd	r24, Y+9	; 0x09
    218c:	9a 85       	ldd	r25, Y+10	; 0x0a
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	3f ef       	ldi	r19, 0xFF	; 255
    2192:	4f e7       	ldi	r20, 0x7F	; 127
    2194:	57 e4       	ldi	r21, 0x47	; 71
    2196:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    219a:	18 16       	cp	r1, r24
    219c:	4c f5       	brge	.+82     	; 0x21f0 <LCD_init+0x562>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219e:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e2       	ldi	r20, 0x20	; 32
    21ac:	51 e4       	ldi	r21, 0x41	; 65
    21ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9e 83       	std	Y+6, r25	; 0x06
    21c4:	8d 83       	std	Y+5, r24	; 0x05
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <LCD_init+0x558>
    21c8:	88 ec       	ldi	r24, 0xC8	; 200
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	9c 81       	ldd	r25, Y+4	; 0x04
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_init+0x546>
    21d8:	9c 83       	std	Y+4, r25	; 0x04
    21da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	9e 83       	std	Y+6, r25	; 0x06
    21e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	69 f7       	brne	.-38     	; 0x21c8 <LCD_init+0x53a>
    21ee:	14 c0       	rjmp	.+40     	; 0x2218 <LCD_init+0x58a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f0:	6f 81       	ldd	r22, Y+7	; 0x07
    21f2:	78 85       	ldd	r23, Y+8	; 0x08
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <LCD_init+0x582>
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_sendCommand(ENTRY_MODE_SET);
    2218:	86 e0       	ldi	r24, 0x06	; 6
    221a:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_sendCommand>
}
    221e:	c4 5b       	subi	r28, 0xB4	; 180
    2220:	df 4f       	sbci	r29, 0xFF	; 255
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	de bf       	out	0x3e, r29	; 62
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	1f 91       	pop	r17
    2232:	0f 91       	pop	r16
    2234:	08 95       	ret

00002236 <LCD_sendCommand>:

/*****   LCD_sendCommand    *******************/

void LCD_sendCommand(uint8 command)
{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	6d 97       	sbiw	r28, 0x1d	; 29
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	8d 8f       	std	Y+29, r24	; 0x1d
	CLEAR_BIT(LCD_CTRL_PORT,RS);
    224c:	a5 e3       	ldi	r26, 0x35	; 53
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e5 e3       	ldi	r30, 0x35	; 53
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	8e 7f       	andi	r24, 0xFE	; 254
    2258:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    225a:	a5 e3       	ldi	r26, 0x35	; 53
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e5 e3       	ldi	r30, 0x35	; 53
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	8d 7f       	andi	r24, 0xFD	; 253
    2266:	8c 93       	st	X, r24
#if (DATA_BITS_MODE == 4)

	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f)\
    2268:	a5 e3       	ldi	r26, 0x35	; 53
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	e5 e3       	ldi	r30, 0x35	; 53
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	98 2f       	mov	r25, r24
    2274:	9f 70       	andi	r25, 0x0F	; 15
    2276:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2278:	80 7f       	andi	r24, 0xF0	; 240
    227a:	89 2b       	or	r24, r25
    227c:	8c 93       	st	X, r24
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0)\
	  	   		   | ((command & 0xf0)>>4);
#endif

	SET_BIT(LCD_CTRL_PORT,E);
    227e:	a5 e3       	ldi	r26, 0x35	; 53
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	e5 e3       	ldi	r30, 0x35	; 53
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	84 60       	ori	r24, 0x04	; 4
    228a:	8c 93       	st	X, r24
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a0 e8       	ldi	r26, 0x80	; 128
    2292:	bf e3       	ldi	r27, 0x3F	; 63
    2294:	89 8f       	std	Y+25, r24	; 0x19
    2296:	9a 8f       	std	Y+26, r25	; 0x1a
    2298:	ab 8f       	std	Y+27, r26	; 0x1b
    229a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229c:	69 8d       	ldd	r22, Y+25	; 0x19
    229e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a ef       	ldi	r20, 0xFA	; 250
    22aa:	54 e4       	ldi	r21, 0x44	; 68
    22ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	8d 8b       	std	Y+21, r24	; 0x15
    22b6:	9e 8b       	std	Y+22, r25	; 0x16
    22b8:	af 8b       	std	Y+23, r26	; 0x17
    22ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22bc:	6d 89       	ldd	r22, Y+21	; 0x15
    22be:	7e 89       	ldd	r23, Y+22	; 0x16
    22c0:	8f 89       	ldd	r24, Y+23	; 0x17
    22c2:	98 8d       	ldd	r25, Y+24	; 0x18
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <LCD_sendCommand+0xa8>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9c 8b       	std	Y+20, r25	; 0x14
    22da:	8b 8b       	std	Y+19, r24	; 0x13
    22dc:	3f c0       	rjmp	.+126    	; 0x235c <LCD_sendCommand+0x126>
	else if (__tmp > 65535)
    22de:	6d 89       	ldd	r22, Y+21	; 0x15
    22e0:	7e 89       	ldd	r23, Y+22	; 0x16
    22e2:	8f 89       	ldd	r24, Y+23	; 0x17
    22e4:	98 8d       	ldd	r25, Y+24	; 0x18
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	4c f5       	brge	.+82     	; 0x2348 <LCD_sendCommand+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	69 8d       	ldd	r22, Y+25	; 0x19
    22f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9c 8b       	std	Y+20, r25	; 0x14
    231c:	8b 8b       	std	Y+19, r24	; 0x13
    231e:	0f c0       	rjmp	.+30     	; 0x233e <LCD_sendCommand+0x108>
    2320:	88 ec       	ldi	r24, 0xC8	; 200
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9a 8b       	std	Y+18, r25	; 0x12
    2326:	89 8b       	std	Y+17, r24	; 0x11
    2328:	89 89       	ldd	r24, Y+17	; 0x11
    232a:	9a 89       	ldd	r25, Y+18	; 0x12
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <LCD_sendCommand+0xf6>
    2330:	9a 8b       	std	Y+18, r25	; 0x12
    2332:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	8b 89       	ldd	r24, Y+19	; 0x13
    2336:	9c 89       	ldd	r25, Y+20	; 0x14
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	9c 8b       	std	Y+20, r25	; 0x14
    233c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	8b 89       	ldd	r24, Y+19	; 0x13
    2340:	9c 89       	ldd	r25, Y+20	; 0x14
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	69 f7       	brne	.-38     	; 0x2320 <LCD_sendCommand+0xea>
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <LCD_sendCommand+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	6d 89       	ldd	r22, Y+21	; 0x15
    234a:	7e 89       	ldd	r23, Y+22	; 0x16
    234c:	8f 89       	ldd	r24, Y+23	; 0x17
    234e:	98 8d       	ldd	r25, Y+24	; 0x18
    2350:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9c 8b       	std	Y+20, r25	; 0x14
    235a:	8b 8b       	std	Y+19, r24	; 0x13
    235c:	8b 89       	ldd	r24, Y+19	; 0x13
    235e:	9c 89       	ldd	r25, Y+20	; 0x14
    2360:	98 8b       	std	Y+16, r25	; 0x10
    2362:	8f 87       	std	Y+15, r24	; 0x0f
    2364:	8f 85       	ldd	r24, Y+15	; 0x0f
    2366:	98 89       	ldd	r25, Y+16	; 0x10
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_sendCommand+0x132>
    236c:	98 8b       	std	Y+16, r25	; 0x10
    236e:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    CLEAR_BIT(LCD_CTRL_PORT,E);
    2370:	a5 e3       	ldi	r26, 0x35	; 53
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e5 e3       	ldi	r30, 0x35	; 53
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	8b 7f       	andi	r24, 0xFB	; 251
    237c:	8c 93       	st	X, r24

    /* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f)\
    237e:	a5 e3       	ldi	r26, 0x35	; 53
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e5 e3       	ldi	r30, 0x35	; 53
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	28 2f       	mov	r18, r24
    238a:	2f 70       	andi	r18, 0x0F	; 15
    238c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    238e:	88 2f       	mov	r24, r24
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	82 95       	swap	r24
    2394:	92 95       	swap	r25
    2396:	90 7f       	andi	r25, 0xF0	; 240
    2398:	98 27       	eor	r25, r24
    239a:	80 7f       	andi	r24, 0xF0	; 240
    239c:	98 27       	eor	r25, r24
    239e:	82 2b       	or	r24, r18
    23a0:	8c 93       	st	X, r24
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0)\
	  	   		   | (command & 0x0F);
#endif

	SET_BIT(LCD_CTRL_PORT,E);
    23a2:	a5 e3       	ldi	r26, 0x35	; 53
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	e5 e3       	ldi	r30, 0x35	; 53
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	84 60       	ori	r24, 0x04	; 4
    23ae:	8c 93       	st	X, r24
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	a0 e8       	ldi	r26, 0x80	; 128
    23b6:	bf e3       	ldi	r27, 0x3F	; 63
    23b8:	8b 87       	std	Y+11, r24	; 0x0b
    23ba:	9c 87       	std	Y+12, r25	; 0x0c
    23bc:	ad 87       	std	Y+13, r26	; 0x0d
    23be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	4a ef       	ldi	r20, 0xFA	; 250
    23ce:	54 e4       	ldi	r21, 0x44	; 68
    23d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	8f 83       	std	Y+7, r24	; 0x07
    23da:	98 87       	std	Y+8, r25	; 0x08
    23dc:	a9 87       	std	Y+9, r26	; 0x09
    23de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23e0:	6f 81       	ldd	r22, Y+7	; 0x07
    23e2:	78 85       	ldd	r23, Y+8	; 0x08
    23e4:	89 85       	ldd	r24, Y+9	; 0x09
    23e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e8       	ldi	r20, 0x80	; 128
    23ee:	5f e3       	ldi	r21, 0x3F	; 63
    23f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23f4:	88 23       	and	r24, r24
    23f6:	2c f4       	brge	.+10     	; 0x2402 <LCD_sendCommand+0x1cc>
		__ticks = 1;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	3f c0       	rjmp	.+126    	; 0x2480 <LCD_sendCommand+0x24a>
	else if (__tmp > 65535)
    2402:	6f 81       	ldd	r22, Y+7	; 0x07
    2404:	78 85       	ldd	r23, Y+8	; 0x08
    2406:	89 85       	ldd	r24, Y+9	; 0x09
    2408:	9a 85       	ldd	r25, Y+10	; 0x0a
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	3f ef       	ldi	r19, 0xFF	; 255
    240e:	4f e7       	ldi	r20, 0x7F	; 127
    2410:	57 e4       	ldi	r21, 0x47	; 71
    2412:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2416:	18 16       	cp	r1, r24
    2418:	4c f5       	brge	.+82     	; 0x246c <LCD_sendCommand+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241a:	6b 85       	ldd	r22, Y+11	; 0x0b
    241c:	7c 85       	ldd	r23, Y+12	; 0x0c
    241e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2420:	9e 85       	ldd	r25, Y+14	; 0x0e
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e2       	ldi	r20, 0x20	; 32
    2428:	51 e4       	ldi	r21, 0x41	; 65
    242a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	9e 83       	std	Y+6, r25	; 0x06
    2440:	8d 83       	std	Y+5, r24	; 0x05
    2442:	0f c0       	rjmp	.+30     	; 0x2462 <LCD_sendCommand+0x22c>
    2444:	88 ec       	ldi	r24, 0xC8	; 200
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9c 83       	std	Y+4, r25	; 0x04
    244a:	8b 83       	std	Y+3, r24	; 0x03
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	9c 81       	ldd	r25, Y+4	; 0x04
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <LCD_sendCommand+0x21a>
    2454:	9c 83       	std	Y+4, r25	; 0x04
    2456:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2458:	8d 81       	ldd	r24, Y+5	; 0x05
    245a:	9e 81       	ldd	r25, Y+6	; 0x06
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	9e 81       	ldd	r25, Y+6	; 0x06
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	69 f7       	brne	.-38     	; 0x2444 <LCD_sendCommand+0x20e>
    246a:	14 c0       	rjmp	.+40     	; 0x2494 <LCD_sendCommand+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246c:	6f 81       	ldd	r22, Y+7	; 0x07
    246e:	78 85       	ldd	r23, Y+8	; 0x08
    2470:	89 85       	ldd	r24, Y+9	; 0x09
    2472:	9a 85       	ldd	r25, Y+10	; 0x0a
    2474:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	9e 83       	std	Y+6, r25	; 0x06
    247e:	8d 83       	std	Y+5, r24	; 0x05
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
    2482:	9e 81       	ldd	r25, Y+6	; 0x06
    2484:	9a 83       	std	Y+2, r25	; 0x02
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	9a 81       	ldd	r25, Y+2	; 0x02
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <LCD_sendCommand+0x256>
    2490:	9a 83       	std	Y+2, r25	; 0x02
    2492:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    CLEAR_BIT(LCD_CTRL_PORT,E);
    2494:	a5 e3       	ldi	r26, 0x35	; 53
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e5 e3       	ldi	r30, 0x35	; 53
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	8b 7f       	andi	r24, 0xFB	; 251
    24a0:	8c 93       	st	X, r24
    LCD_DATA_PORT = command;
    SET_BIT(LCD_CTRL_PORT,E);
    _delay_ms(1);
    CLEAR_BIT(LCD_CTRL_PORT,E);
#endif
}
    24a2:	6d 96       	adiw	r28, 0x1d	; 29
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	08 95       	ret

000024b4 <LCD_displayCharacter>:

/****  LCD_displayCharacter    *******************/


void  LCD_displayCharacter(uint8 data)
{
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	6d 97       	sbiw	r28, 0x1d	; 29
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	8d 8f       	std	Y+29, r24	; 0x1d
	SET_BIT(LCD_CTRL_PORT,RS);
    24ca:	a5 e3       	ldi	r26, 0x35	; 53
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	e5 e3       	ldi	r30, 0x35	; 53
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	81 60       	ori	r24, 0x01	; 1
    24d6:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    24d8:	a5 e3       	ldi	r26, 0x35	; 53
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	e5 e3       	ldi	r30, 0x35	; 53
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	8d 7f       	andi	r24, 0xFD	; 253
    24e4:	8c 93       	st	X, r24
#if (DATA_BITS_MODE == 4)

	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f)\
    24e6:	a5 e3       	ldi	r26, 0x35	; 53
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e5 e3       	ldi	r30, 0x35	; 53
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	98 2f       	mov	r25, r24
    24f2:	9f 70       	andi	r25, 0x0F	; 15
    24f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24f6:	80 7f       	andi	r24, 0xF0	; 240
    24f8:	89 2b       	or	r24, r25
    24fa:	8c 93       	st	X, r24
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0)\
	  	   		   | ((data & 0xf0)>>4);
#endif

	SET_BIT(LCD_CTRL_PORT,E);
    24fc:	a5 e3       	ldi	r26, 0x35	; 53
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	e5 e3       	ldi	r30, 0x35	; 53
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	84 60       	ori	r24, 0x04	; 4
    2508:	8c 93       	st	X, r24
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	a0 e8       	ldi	r26, 0x80	; 128
    2510:	bf e3       	ldi	r27, 0x3F	; 63
    2512:	89 8f       	std	Y+25, r24	; 0x19
    2514:	9a 8f       	std	Y+26, r25	; 0x1a
    2516:	ab 8f       	std	Y+27, r26	; 0x1b
    2518:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251a:	69 8d       	ldd	r22, Y+25	; 0x19
    251c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    251e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2520:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	4a ef       	ldi	r20, 0xFA	; 250
    2528:	54 e4       	ldi	r21, 0x44	; 68
    252a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	8d 8b       	std	Y+21, r24	; 0x15
    2534:	9e 8b       	std	Y+22, r25	; 0x16
    2536:	af 8b       	std	Y+23, r26	; 0x17
    2538:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    253a:	6d 89       	ldd	r22, Y+21	; 0x15
    253c:	7e 89       	ldd	r23, Y+22	; 0x16
    253e:	8f 89       	ldd	r24, Y+23	; 0x17
    2540:	98 8d       	ldd	r25, Y+24	; 0x18
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e8       	ldi	r20, 0x80	; 128
    2548:	5f e3       	ldi	r21, 0x3F	; 63
    254a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    254e:	88 23       	and	r24, r24
    2550:	2c f4       	brge	.+10     	; 0x255c <LCD_displayCharacter+0xa8>
		__ticks = 1;
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	9c 8b       	std	Y+20, r25	; 0x14
    2558:	8b 8b       	std	Y+19, r24	; 0x13
    255a:	3f c0       	rjmp	.+126    	; 0x25da <LCD_displayCharacter+0x126>
	else if (__tmp > 65535)
    255c:	6d 89       	ldd	r22, Y+21	; 0x15
    255e:	7e 89       	ldd	r23, Y+22	; 0x16
    2560:	8f 89       	ldd	r24, Y+23	; 0x17
    2562:	98 8d       	ldd	r25, Y+24	; 0x18
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	3f ef       	ldi	r19, 0xFF	; 255
    2568:	4f e7       	ldi	r20, 0x7F	; 127
    256a:	57 e4       	ldi	r21, 0x47	; 71
    256c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2570:	18 16       	cp	r1, r24
    2572:	4c f5       	brge	.+82     	; 0x25c6 <LCD_displayCharacter+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2574:	69 8d       	ldd	r22, Y+25	; 0x19
    2576:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2578:	8b 8d       	ldd	r24, Y+27	; 0x1b
    257a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e2       	ldi	r20, 0x20	; 32
    2582:	51 e4       	ldi	r21, 0x41	; 65
    2584:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	bc 01       	movw	r22, r24
    258e:	cd 01       	movw	r24, r26
    2590:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	9c 8b       	std	Y+20, r25	; 0x14
    259a:	8b 8b       	std	Y+19, r24	; 0x13
    259c:	0f c0       	rjmp	.+30     	; 0x25bc <LCD_displayCharacter+0x108>
    259e:	88 ec       	ldi	r24, 0xC8	; 200
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	9a 8b       	std	Y+18, r25	; 0x12
    25a4:	89 8b       	std	Y+17, r24	; 0x11
    25a6:	89 89       	ldd	r24, Y+17	; 0x11
    25a8:	9a 89       	ldd	r25, Y+18	; 0x12
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <LCD_displayCharacter+0xf6>
    25ae:	9a 8b       	std	Y+18, r25	; 0x12
    25b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b2:	8b 89       	ldd	r24, Y+19	; 0x13
    25b4:	9c 89       	ldd	r25, Y+20	; 0x14
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	9c 8b       	std	Y+20, r25	; 0x14
    25ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25bc:	8b 89       	ldd	r24, Y+19	; 0x13
    25be:	9c 89       	ldd	r25, Y+20	; 0x14
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	69 f7       	brne	.-38     	; 0x259e <LCD_displayCharacter+0xea>
    25c4:	14 c0       	rjmp	.+40     	; 0x25ee <LCD_displayCharacter+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c6:	6d 89       	ldd	r22, Y+21	; 0x15
    25c8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ca:	8f 89       	ldd	r24, Y+23	; 0x17
    25cc:	98 8d       	ldd	r25, Y+24	; 0x18
    25ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	9c 8b       	std	Y+20, r25	; 0x14
    25d8:	8b 8b       	std	Y+19, r24	; 0x13
    25da:	8b 89       	ldd	r24, Y+19	; 0x13
    25dc:	9c 89       	ldd	r25, Y+20	; 0x14
    25de:	98 8b       	std	Y+16, r25	; 0x10
    25e0:	8f 87       	std	Y+15, r24	; 0x0f
    25e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e4:	98 89       	ldd	r25, Y+16	; 0x10
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <LCD_displayCharacter+0x132>
    25ea:	98 8b       	std	Y+16, r25	; 0x10
    25ec:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    CLEAR_BIT(LCD_CTRL_PORT,E);
    25ee:	a5 e3       	ldi	r26, 0x35	; 53
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	e5 e3       	ldi	r30, 0x35	; 53
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	8b 7f       	andi	r24, 0xFB	; 251
    25fa:	8c 93       	st	X, r24

    /* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0f)\
    25fc:	a5 e3       	ldi	r26, 0x35	; 53
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e5 e3       	ldi	r30, 0x35	; 53
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	28 2f       	mov	r18, r24
    2608:	2f 70       	andi	r18, 0x0F	; 15
    260a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    260c:	88 2f       	mov	r24, r24
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	82 95       	swap	r24
    2612:	92 95       	swap	r25
    2614:	90 7f       	andi	r25, 0xF0	; 240
    2616:	98 27       	eor	r25, r24
    2618:	80 7f       	andi	r24, 0xF0	; 240
    261a:	98 27       	eor	r25, r24
    261c:	82 2b       	or	r24, r18
    261e:	8c 93       	st	X, r24
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0)\
	  	   		   | (data & 0x0f);
#endif

	SET_BIT(LCD_CTRL_PORT,E);
    2620:	a5 e3       	ldi	r26, 0x35	; 53
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	e5 e3       	ldi	r30, 0x35	; 53
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	84 60       	ori	r24, 0x04	; 4
    262c:	8c 93       	st	X, r24
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	a0 e8       	ldi	r26, 0x80	; 128
    2634:	bf e3       	ldi	r27, 0x3F	; 63
    2636:	8b 87       	std	Y+11, r24	; 0x0b
    2638:	9c 87       	std	Y+12, r25	; 0x0c
    263a:	ad 87       	std	Y+13, r26	; 0x0d
    263c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2640:	7c 85       	ldd	r23, Y+12	; 0x0c
    2642:	8d 85       	ldd	r24, Y+13	; 0x0d
    2644:	9e 85       	ldd	r25, Y+14	; 0x0e
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	4a ef       	ldi	r20, 0xFA	; 250
    264c:	54 e4       	ldi	r21, 0x44	; 68
    264e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	8f 83       	std	Y+7, r24	; 0x07
    2658:	98 87       	std	Y+8, r25	; 0x08
    265a:	a9 87       	std	Y+9, r26	; 0x09
    265c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    265e:	6f 81       	ldd	r22, Y+7	; 0x07
    2660:	78 85       	ldd	r23, Y+8	; 0x08
    2662:	89 85       	ldd	r24, Y+9	; 0x09
    2664:	9a 85       	ldd	r25, Y+10	; 0x0a
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e8       	ldi	r20, 0x80	; 128
    266c:	5f e3       	ldi	r21, 0x3F	; 63
    266e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2672:	88 23       	and	r24, r24
    2674:	2c f4       	brge	.+10     	; 0x2680 <LCD_displayCharacter+0x1cc>
		__ticks = 1;
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	9e 83       	std	Y+6, r25	; 0x06
    267c:	8d 83       	std	Y+5, r24	; 0x05
    267e:	3f c0       	rjmp	.+126    	; 0x26fe <LCD_displayCharacter+0x24a>
	else if (__tmp > 65535)
    2680:	6f 81       	ldd	r22, Y+7	; 0x07
    2682:	78 85       	ldd	r23, Y+8	; 0x08
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	3f ef       	ldi	r19, 0xFF	; 255
    268c:	4f e7       	ldi	r20, 0x7F	; 127
    268e:	57 e4       	ldi	r21, 0x47	; 71
    2690:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2694:	18 16       	cp	r1, r24
    2696:	4c f5       	brge	.+82     	; 0x26ea <LCD_displayCharacter+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2698:	6b 85       	ldd	r22, Y+11	; 0x0b
    269a:	7c 85       	ldd	r23, Y+12	; 0x0c
    269c:	8d 85       	ldd	r24, Y+13	; 0x0d
    269e:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e2       	ldi	r20, 0x20	; 32
    26a6:	51 e4       	ldi	r21, 0x41	; 65
    26a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	bc 01       	movw	r22, r24
    26b2:	cd 01       	movw	r24, r26
    26b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	9e 83       	std	Y+6, r25	; 0x06
    26be:	8d 83       	std	Y+5, r24	; 0x05
    26c0:	0f c0       	rjmp	.+30     	; 0x26e0 <LCD_displayCharacter+0x22c>
    26c2:	88 ec       	ldi	r24, 0xC8	; 200
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	9c 83       	std	Y+4, r25	; 0x04
    26c8:	8b 83       	std	Y+3, r24	; 0x03
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	9c 81       	ldd	r25, Y+4	; 0x04
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <LCD_displayCharacter+0x21a>
    26d2:	9c 83       	std	Y+4, r25	; 0x04
    26d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d6:	8d 81       	ldd	r24, Y+5	; 0x05
    26d8:	9e 81       	ldd	r25, Y+6	; 0x06
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e0:	8d 81       	ldd	r24, Y+5	; 0x05
    26e2:	9e 81       	ldd	r25, Y+6	; 0x06
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	69 f7       	brne	.-38     	; 0x26c2 <LCD_displayCharacter+0x20e>
    26e8:	14 c0       	rjmp	.+40     	; 0x2712 <LCD_displayCharacter+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ea:	6f 81       	ldd	r22, Y+7	; 0x07
    26ec:	78 85       	ldd	r23, Y+8	; 0x08
    26ee:	89 85       	ldd	r24, Y+9	; 0x09
    26f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9e 83       	std	Y+6, r25	; 0x06
    26fc:	8d 83       	std	Y+5, r24	; 0x05
    26fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2700:	9e 81       	ldd	r25, Y+6	; 0x06
    2702:	9a 83       	std	Y+2, r25	; 0x02
    2704:	89 83       	std	Y+1, r24	; 0x01
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <LCD_displayCharacter+0x256>
    270e:	9a 83       	std	Y+2, r25	; 0x02
    2710:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    CLEAR_BIT(LCD_CTRL_PORT,E);
    2712:	a5 e3       	ldi	r26, 0x35	; 53
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	e5 e3       	ldi	r30, 0x35	; 53
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	8b 7f       	andi	r24, 0xFB	; 251
    271e:	8c 93       	st	X, r24
    LCD_DATA_PORT = command;
    SET_BIT(LCD_CTRL_PORT,E);
    _delay_ms(1);
    CLEAR_BIT(LCD_CTRL_PORT,E);
#endif
}
    2720:	6d 96       	adiw	r28, 0x1d	; 29
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <LCD_displayString>:


/******   LCD_displayString     ******************/

void LCD_displayString(const char *str)
{
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	00 d0       	rcall	.+0      	; 0x2738 <LCD_displayString+0x6>
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	9a 83       	std	Y+2, r25	; 0x02
    273e:	89 83       	std	Y+1, r24	; 0x01
    2740:	0a c0       	rjmp	.+20     	; 0x2756 <LCD_displayString+0x24>
	while(*str != '\0')
	{
		LCD_displayCharacter(*str);
    2742:	e9 81       	ldd	r30, Y+1	; 0x01
    2744:	fa 81       	ldd	r31, Y+2	; 0x02
    2746:	80 81       	ld	r24, Z
    2748:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
		str++;
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	9a 81       	ldd	r25, Y+2	; 0x02
    2750:	01 96       	adiw	r24, 0x01	; 1
    2752:	9a 83       	std	Y+2, r25	; 0x02
    2754:	89 83       	std	Y+1, r24	; 0x01

/******   LCD_displayString     ******************/

void LCD_displayString(const char *str)
{
	while(*str != '\0')
    2756:	e9 81       	ldd	r30, Y+1	; 0x01
    2758:	fa 81       	ldd	r31, Y+2	; 0x02
    275a:	80 81       	ld	r24, Z
    275c:	88 23       	and	r24, r24
    275e:	89 f7       	brne	.-30     	; 0x2742 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*str);
		str++;
	}
}
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <LCD_goToRowColumn>:

/****      LCD_goToRowColumn   *****************/

void LCD_goToRowColumn(uint8 row , uint8 col)
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	00 d0       	rcall	.+0      	; 0x2770 <LCD_goToRowColumn+0x6>
    2770:	00 d0       	rcall	.+0      	; 0x2772 <LCD_goToRowColumn+0x8>
    2772:	0f 92       	push	r0
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	8a 83       	std	Y+2, r24	; 0x02
    277a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	if(col<=39)
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	88 32       	cpi	r24, 0x28	; 40
    2780:	a0 f5       	brcc	.+104    	; 0x27ea <LCD_goToRowColumn+0x80>
	{
		switch(row)
    2782:	8a 81       	ldd	r24, Y+2	; 0x02
    2784:	28 2f       	mov	r18, r24
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	3d 83       	std	Y+5, r19	; 0x05
    278a:	2c 83       	std	Y+4, r18	; 0x04
    278c:	8c 81       	ldd	r24, Y+4	; 0x04
    278e:	9d 81       	ldd	r25, Y+5	; 0x05
    2790:	81 30       	cpi	r24, 0x01	; 1
    2792:	91 05       	cpc	r25, r1
    2794:	c9 f0       	breq	.+50     	; 0x27c8 <LCD_goToRowColumn+0x5e>
    2796:	2c 81       	ldd	r18, Y+4	; 0x04
    2798:	3d 81       	ldd	r19, Y+5	; 0x05
    279a:	22 30       	cpi	r18, 0x02	; 2
    279c:	31 05       	cpc	r19, r1
    279e:	2c f4       	brge	.+10     	; 0x27aa <LCD_goToRowColumn+0x40>
    27a0:	8c 81       	ldd	r24, Y+4	; 0x04
    27a2:	9d 81       	ldd	r25, Y+5	; 0x05
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	61 f0       	breq	.+24     	; 0x27c0 <LCD_goToRowColumn+0x56>
    27a8:	1d c0       	rjmp	.+58     	; 0x27e4 <LCD_goToRowColumn+0x7a>
    27aa:	2c 81       	ldd	r18, Y+4	; 0x04
    27ac:	3d 81       	ldd	r19, Y+5	; 0x05
    27ae:	22 30       	cpi	r18, 0x02	; 2
    27b0:	31 05       	cpc	r19, r1
    27b2:	79 f0       	breq	.+30     	; 0x27d2 <LCD_goToRowColumn+0x68>
    27b4:	8c 81       	ldd	r24, Y+4	; 0x04
    27b6:	9d 81       	ldd	r25, Y+5	; 0x05
    27b8:	83 30       	cpi	r24, 0x03	; 3
    27ba:	91 05       	cpc	r25, r1
    27bc:	79 f0       	breq	.+30     	; 0x27dc <LCD_goToRowColumn+0x72>
    27be:	12 c0       	rjmp	.+36     	; 0x27e4 <LCD_goToRowColumn+0x7a>
		{
		case 0:
			address = SET_CURSOR_LOCATION | col;
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	80 68       	ori	r24, 0x80	; 128
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	0e c0       	rjmp	.+28     	; 0x27e4 <LCD_goToRowColumn+0x7a>
			break;
		case 1:
			address = SET_CURSOR_LOCATION | (col+0x40);
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	80 5c       	subi	r24, 0xC0	; 192
    27cc:	80 68       	ori	r24, 0x80	; 128
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	09 c0       	rjmp	.+18     	; 0x27e4 <LCD_goToRowColumn+0x7a>
			break;
		case 2:
			address = SET_CURSOR_LOCATION | (col+0x10);
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	80 5f       	subi	r24, 0xF0	; 240
    27d6:	80 68       	ori	r24, 0x80	; 128
    27d8:	89 83       	std	Y+1, r24	; 0x01
    27da:	04 c0       	rjmp	.+8      	; 0x27e4 <LCD_goToRowColumn+0x7a>
			break;
		case 3:
			address = SET_CURSOR_LOCATION | (col+0x50);
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	80 5b       	subi	r24, 0xB0	; 176
    27e0:	80 68       	ori	r24, 0x80	; 128
    27e2:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
		}
		LCD_sendCommand(address);
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_sendCommand>
	}
}
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	08 95       	ret

000027fa <LCD_displayStringRowColumn>:

/*********   LCD_displayStringRowColumn  *******/
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <LCD_displayStringRowColumn+0x6>
    2800:	00 d0       	rcall	.+0      	; 0x2802 <LCD_displayStringRowColumn+0x8>
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
    2806:	89 83       	std	Y+1, r24	; 0x01
    2808:	6a 83       	std	Y+2, r22	; 0x02
    280a:	5c 83       	std	Y+4, r21	; 0x04
    280c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	6a 81       	ldd	r22, Y+2	; 0x02
    2812:	0e 94 b5 13 	call	0x276a	; 0x276a <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
    2818:	9c 81       	ldd	r25, Y+4	; 0x04
    281a:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_displayString>
}
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <LCD_intgerToString>:

/********     LCD_intgerToString    *****************/
void LCD_intgerToString(sint32 num)
{
    282c:	0f 93       	push	r16
    282e:	1f 93       	push	r17
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	66 97       	sbiw	r28, 0x16	; 22
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	6b 8b       	std	Y+19, r22	; 0x13
    2846:	7c 8b       	std	Y+20, r23	; 0x14
    2848:	8d 8b       	std	Y+21, r24	; 0x15
    284a:	9e 8b       	std	Y+22, r25	; 0x16
	uint8 arr[10] ,i=0, j ;
    284c:	18 86       	std	Y+8, r1	; 0x08
		sint16 sign = num;
    284e:	8b 89       	ldd	r24, Y+19	; 0x13
    2850:	9c 89       	ldd	r25, Y+20	; 0x14
    2852:	9e 83       	std	Y+6, r25	; 0x06
    2854:	8d 83       	std	Y+5, r24	; 0x05
		sint16 s , k;

		if(num<0)          //check sign
    2856:	8b 89       	ldd	r24, Y+19	; 0x13
    2858:	9c 89       	ldd	r25, Y+20	; 0x14
    285a:	ad 89       	ldd	r26, Y+21	; 0x15
    285c:	be 89       	ldd	r27, Y+22	; 0x16
    285e:	bb 23       	and	r27, r27
    2860:	7c f4       	brge	.+30     	; 0x2880 <LCD_intgerToString+0x54>
		{
			num=-num;
    2862:	8b 89       	ldd	r24, Y+19	; 0x13
    2864:	9c 89       	ldd	r25, Y+20	; 0x14
    2866:	ad 89       	ldd	r26, Y+21	; 0x15
    2868:	be 89       	ldd	r27, Y+22	; 0x16
    286a:	b0 95       	com	r27
    286c:	a0 95       	com	r26
    286e:	90 95       	com	r25
    2870:	81 95       	neg	r24
    2872:	9f 4f       	sbci	r25, 0xFF	; 255
    2874:	af 4f       	sbci	r26, 0xFF	; 255
    2876:	bf 4f       	sbci	r27, 0xFF	; 255
    2878:	8b 8b       	std	Y+19, r24	; 0x13
    287a:	9c 8b       	std	Y+20, r25	; 0x14
    287c:	ad 8b       	std	Y+21, r26	; 0x15
    287e:	be 8b       	std	Y+22, r27	; 0x16
		}

		do{     // convert num to ASCI in reverse order
			arr[i]= num%10 + '0';
    2880:	88 85       	ldd	r24, Y+8	; 0x08
    2882:	08 2f       	mov	r16, r24
    2884:	10 e0       	ldi	r17, 0x00	; 0
    2886:	8b 89       	ldd	r24, Y+19	; 0x13
    2888:	9c 89       	ldd	r25, Y+20	; 0x14
    288a:	ad 89       	ldd	r26, Y+21	; 0x15
    288c:	be 89       	ldd	r27, Y+22	; 0x16
    288e:	2a e0       	ldi	r18, 0x0A	; 10
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	50 e0       	ldi	r21, 0x00	; 0
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <__divmodsi4>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	28 2f       	mov	r18, r24
    28a4:	20 5d       	subi	r18, 0xD0	; 208
    28a6:	ce 01       	movw	r24, r28
    28a8:	09 96       	adiw	r24, 0x09	; 9
    28aa:	fc 01       	movw	r30, r24
    28ac:	e0 0f       	add	r30, r16
    28ae:	f1 1f       	adc	r31, r17
    28b0:	20 83       	st	Z, r18
			i++;
    28b2:	88 85       	ldd	r24, Y+8	; 0x08
    28b4:	8f 5f       	subi	r24, 0xFF	; 255
    28b6:	88 87       	std	Y+8, r24	; 0x08
		}while((num = (num-num%10)/10)>0);
    28b8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ba:	9c 89       	ldd	r25, Y+20	; 0x14
    28bc:	ad 89       	ldd	r26, Y+21	; 0x15
    28be:	be 89       	ldd	r27, Y+22	; 0x16
    28c0:	2a e0       	ldi	r18, 0x0A	; 10
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e0       	ldi	r20, 0x00	; 0
    28c6:	50 e0       	ldi	r21, 0x00	; 0
    28c8:	bc 01       	movw	r22, r24
    28ca:	cd 01       	movw	r24, r26
    28cc:	0e 94 92 16 	call	0x2d24	; 0x2d24 <__divmodsi4>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	9c 01       	movw	r18, r24
    28d6:	ad 01       	movw	r20, r26
    28d8:	8b 89       	ldd	r24, Y+19	; 0x13
    28da:	9c 89       	ldd	r25, Y+20	; 0x14
    28dc:	ad 89       	ldd	r26, Y+21	; 0x15
    28de:	be 89       	ldd	r27, Y+22	; 0x16
    28e0:	82 1b       	sub	r24, r18
    28e2:	93 0b       	sbc	r25, r19
    28e4:	a4 0b       	sbc	r26, r20
    28e6:	b5 0b       	sbc	r27, r21
    28e8:	2a e0       	ldi	r18, 0x0A	; 10
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	50 e0       	ldi	r21, 0x00	; 0
    28f0:	bc 01       	movw	r22, r24
    28f2:	cd 01       	movw	r24, r26
    28f4:	0e 94 92 16 	call	0x2d24	; 0x2d24 <__divmodsi4>
    28f8:	da 01       	movw	r26, r20
    28fa:	c9 01       	movw	r24, r18
    28fc:	8b 8b       	std	Y+19, r24	; 0x13
    28fe:	9c 8b       	std	Y+20, r25	; 0x14
    2900:	ad 8b       	std	Y+21, r26	; 0x15
    2902:	be 8b       	std	Y+22, r27	; 0x16
    2904:	8b 89       	ldd	r24, Y+19	; 0x13
    2906:	9c 89       	ldd	r25, Y+20	; 0x14
    2908:	ad 89       	ldd	r26, Y+21	; 0x15
    290a:	be 89       	ldd	r27, Y+22	; 0x16
    290c:	18 16       	cp	r1, r24
    290e:	19 06       	cpc	r1, r25
    2910:	1a 06       	cpc	r1, r26
    2912:	1b 06       	cpc	r1, r27
    2914:	0c f4       	brge	.+2      	; 0x2918 <LCD_intgerToString+0xec>
    2916:	b4 cf       	rjmp	.-152    	; 0x2880 <LCD_intgerToString+0x54>

		if(sign<0)        // put sign
    2918:	8d 81       	ldd	r24, Y+5	; 0x05
    291a:	9e 81       	ldd	r25, Y+6	; 0x06
    291c:	99 23       	and	r25, r25
    291e:	6c f4       	brge	.+26     	; 0x293a <LCD_intgerToString+0x10e>
			{
			arr[i++]= '-';
    2920:	88 85       	ldd	r24, Y+8	; 0x08
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	ce 01       	movw	r24, r28
    2928:	09 96       	adiw	r24, 0x09	; 9
    292a:	fc 01       	movw	r30, r24
    292c:	e2 0f       	add	r30, r18
    292e:	f3 1f       	adc	r31, r19
    2930:	8d e2       	ldi	r24, 0x2D	; 45
    2932:	80 83       	st	Z, r24
    2934:	88 85       	ldd	r24, Y+8	; 0x08
    2936:	8f 5f       	subi	r24, 0xFF	; 255
    2938:	88 87       	std	Y+8, r24	; 0x08
			}
		j=i-1;   k=i;
    293a:	88 85       	ldd	r24, Y+8	; 0x08
    293c:	81 50       	subi	r24, 0x01	; 1
    293e:	8f 83       	std	Y+7, r24	; 0x07
    2940:	88 85       	ldd	r24, Y+8	; 0x08
    2942:	88 2f       	mov	r24, r24
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	9a 83       	std	Y+2, r25	; 0x02
    2948:	89 83       	std	Y+1, r24	; 0x01

		for(i=0; i<j; i++,j--)        // Reverse array to put number in order
    294a:	18 86       	std	Y+8, r1	; 0x08
    294c:	2f c0       	rjmp	.+94     	; 0x29ac <LCD_intgerToString+0x180>
		{
			s = arr[i];
    294e:	88 85       	ldd	r24, Y+8	; 0x08
    2950:	28 2f       	mov	r18, r24
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	ce 01       	movw	r24, r28
    2956:	09 96       	adiw	r24, 0x09	; 9
    2958:	fc 01       	movw	r30, r24
    295a:	e2 0f       	add	r30, r18
    295c:	f3 1f       	adc	r31, r19
    295e:	80 81       	ld	r24, Z
    2960:	88 2f       	mov	r24, r24
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	9c 83       	std	Y+4, r25	; 0x04
    2966:	8b 83       	std	Y+3, r24	; 0x03
			arr[i] = arr[j];
    2968:	88 85       	ldd	r24, Y+8	; 0x08
    296a:	48 2f       	mov	r20, r24
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	8f 81       	ldd	r24, Y+7	; 0x07
    2970:	28 2f       	mov	r18, r24
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	ce 01       	movw	r24, r28
    2976:	09 96       	adiw	r24, 0x09	; 9
    2978:	fc 01       	movw	r30, r24
    297a:	e2 0f       	add	r30, r18
    297c:	f3 1f       	adc	r31, r19
    297e:	20 81       	ld	r18, Z
    2980:	ce 01       	movw	r24, r28
    2982:	09 96       	adiw	r24, 0x09	; 9
    2984:	fc 01       	movw	r30, r24
    2986:	e4 0f       	add	r30, r20
    2988:	f5 1f       	adc	r31, r21
    298a:	20 83       	st	Z, r18
			arr[j] = s;
    298c:	8f 81       	ldd	r24, Y+7	; 0x07
    298e:	28 2f       	mov	r18, r24
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	4b 81       	ldd	r20, Y+3	; 0x03
    2994:	ce 01       	movw	r24, r28
    2996:	09 96       	adiw	r24, 0x09	; 9
    2998:	fc 01       	movw	r30, r24
    299a:	e2 0f       	add	r30, r18
    299c:	f3 1f       	adc	r31, r19
    299e:	40 83       	st	Z, r20
			{
			arr[i++]= '-';
			}
		j=i-1;   k=i;

		for(i=0; i<j; i++,j--)        // Reverse array to put number in order
    29a0:	88 85       	ldd	r24, Y+8	; 0x08
    29a2:	8f 5f       	subi	r24, 0xFF	; 255
    29a4:	88 87       	std	Y+8, r24	; 0x08
    29a6:	8f 81       	ldd	r24, Y+7	; 0x07
    29a8:	81 50       	subi	r24, 0x01	; 1
    29aa:	8f 83       	std	Y+7, r24	; 0x07
    29ac:	98 85       	ldd	r25, Y+8	; 0x08
    29ae:	8f 81       	ldd	r24, Y+7	; 0x07
    29b0:	98 17       	cp	r25, r24
    29b2:	68 f2       	brcs	.-102    	; 0x294e <LCD_intgerToString+0x122>
			s = arr[i];
			arr[i] = arr[j];
			arr[j] = s;
		}

			for( j=0; j<k; j++ )        // printing the number
    29b4:	1f 82       	std	Y+7, r1	; 0x07
    29b6:	0e c0       	rjmp	.+28     	; 0x29d4 <LCD_intgerToString+0x1a8>
		{
				LCD_displayCharacter(arr[j]);
    29b8:	8f 81       	ldd	r24, Y+7	; 0x07
    29ba:	28 2f       	mov	r18, r24
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	ce 01       	movw	r24, r28
    29c0:	09 96       	adiw	r24, 0x09	; 9
    29c2:	fc 01       	movw	r30, r24
    29c4:	e2 0f       	add	r30, r18
    29c6:	f3 1f       	adc	r31, r19
    29c8:	80 81       	ld	r24, Z
    29ca:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
			s = arr[i];
			arr[i] = arr[j];
			arr[j] = s;
		}

			for( j=0; j<k; j++ )        // printing the number
    29ce:	8f 81       	ldd	r24, Y+7	; 0x07
    29d0:	8f 5f       	subi	r24, 0xFF	; 255
    29d2:	8f 83       	std	Y+7, r24	; 0x07
    29d4:	8f 81       	ldd	r24, Y+7	; 0x07
    29d6:	28 2f       	mov	r18, r24
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	9a 81       	ldd	r25, Y+2	; 0x02
    29de:	28 17       	cp	r18, r24
    29e0:	39 07       	cpc	r19, r25
    29e2:	54 f3       	brlt	.-44     	; 0x29b8 <LCD_intgerToString+0x18c>
		{
				LCD_displayCharacter(arr[j]);
		}
}
    29e4:	66 96       	adiw	r28, 0x16	; 22
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	cd bf       	out	0x3d, r28	; 61
    29f0:	cf 91       	pop	r28
    29f2:	df 91       	pop	r29
    29f4:	1f 91       	pop	r17
    29f6:	0f 91       	pop	r16
    29f8:	08 95       	ret

000029fa <LCD_clearScreen>:

/****** LCD_clearScreen  ***************************/

void LCD_clearScreen(void)
{
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_sendCommand>
}
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <LCD_SetCGRAMAddress>:

///////////////  (CG RAM)caracter generator  ///////////////////////////////////////////

void LCD_SetCGRAMAddress(void)
{
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(0b01000000);
    2a16:	80 e4       	ldi	r24, 0x40	; 64
    2a18:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_sendCommand>

	LCD_displayCharacter(0b00000000);
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00001000);
    2a22:	88 e0       	ldi	r24, 0x08	; 8
    2a24:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00001000);
    2a28:	88 e0       	ldi	r24, 0x08	; 8
    2a2a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00001000);
    2a2e:	88 e0       	ldi	r24, 0x08	; 8
    2a30:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00001000);
    2a34:	88 e0       	ldi	r24, 0x08	; 8
    2a36:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00001001);
    2a3a:	89 e0       	ldi	r24, 0x09	; 9
    2a3c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00001111);
    2a40:	8f e0       	ldi	r24, 0x0F	; 15
    2a42:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>

	LCD_sendCommand(0b01001000);
    2a4c:	88 e4       	ldi	r24, 0x48	; 72
    2a4e:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_sendCommand>

	LCD_displayCharacter(0b00000000);
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000100);
    2a5e:	84 e0       	ldi	r24, 0x04	; 4
    2a60:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000110);
    2a6a:	86 e0       	ldi	r24, 0x06	; 6
    2a6c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00001001);
    2a70:	89 e0       	ldi	r24, 0x09	; 9
    2a72:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00011111);
    2a76:	8f e1       	ldi	r24, 0x1F	; 31
    2a78:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>

	LCD_sendCommand(0b01010000);
    2a82:	80 e5       	ldi	r24, 0x50	; 80
    2a84:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_sendCommand>

	LCD_displayCharacter(0b00000000);
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000001);
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000010);
    2aac:	82 e0       	ldi	r24, 0x02	; 2
    2aae:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00011100);
    2ab2:	8c e1       	ldi	r24, 0x1C	; 28
    2ab4:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>

	LCD_sendCommand(0b01011000);
    2ab8:	88 e5       	ldi	r24, 0x58	; 88
    2aba:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_sendCommand>

	LCD_displayCharacter(0b00000000);
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>

	LCD_sendCommand(0b01100000);
    2aee:	80 e6       	ldi	r24, 0x60	; 96
    2af0:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_sendCommand>

	LCD_displayCharacter(0b00000000);
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000001);
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000001);
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000001);
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00011111);
    2b18:	8f e1       	ldi	r24, 0x1F	; 31
    2b1a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_sendCommand(0b01101000);
    2b24:	88 e6       	ldi	r24, 0x68	; 104
    2b26:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_sendCommand>

	LCD_displayCharacter(0b00000000);
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000111);
    2b48:	87 e0       	ldi	r24, 0x07	; 7
    2b4a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00111101);
    2b4e:	8d e3       	ldi	r24, 0x3D	; 61
    2b50:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000111);
    2b54:	87 e0       	ldi	r24, 0x07	; 7
    2b56:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>

	LCD_sendCommand(0b01110000);
    2b5a:	80 e7       	ldi	r24, 0x70	; 112
    2b5c:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_sendCommand>

	LCD_displayCharacter(0b00000000);
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00001111);
    2b78:	8f e0       	ldi	r24, 0x0F	; 15
    2b7a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000001);
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00011111);
    2b84:	8f e1       	ldi	r24, 0x1F	; 31
    2b86:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>

	LCD_sendCommand(0b01111000);
    2b90:	88 e7       	ldi	r24, 0x78	; 120
    2b92:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_sendCommand>

	LCD_displayCharacter(0b00000111);
    2b96:	87 e0       	ldi	r24, 0x07	; 7
    2b98:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000100);
    2b9c:	84 e0       	ldi	r24, 0x04	; 4
    2b9e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00001111);
    2ba2:	8f e0       	ldi	r24, 0x0F	; 15
    2ba4:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000000);
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000100);
    2bae:	84 e0       	ldi	r24, 0x04	; 4
    2bb0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000100);
    2bb4:	84 e0       	ldi	r24, 0x04	; 4
    2bb6:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000100);
    2bba:	84 e0       	ldi	r24, 0x04	; 4
    2bbc:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
	LCD_displayCharacter(0b00000100);
    2bc0:	84 e0       	ldi	r24, 0x04	; 4
    2bc2:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
}
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	08 95       	ret

00002bcc <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62

	UCSRA = (1<<U2X);
    2bd4:	eb e2       	ldi	r30, 0x2B	; 43
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	82 e0       	ldi	r24, 0x02	; 2
    2bda:	80 83       	st	Z, r24

	UCSRB = (1<<RXEN) | (1<<TXEN);
    2bdc:	ea e2       	ldi	r30, 0x2A	; 42
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	88 e1       	ldi	r24, 0x18	; 24
    2be2:	80 83       	st	Z, r24
	

	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2be4:	e0 e4       	ldi	r30, 0x40	; 64
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	86 e8       	ldi	r24, 0x86	; 134
    2bea:	80 83       	st	Z, r24
	

	UBRRH = BAUD_PRESCALE>>8;
    2bec:	e0 e4       	ldi	r30, 0x40	; 64
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2bf2:	e9 e2       	ldi	r30, 0x29	; 41
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	87 e6       	ldi	r24, 0x67	; 103
    2bf8:	80 83       	st	Z, r24
}
    2bfa:	cf 91       	pop	r28
    2bfc:	df 91       	pop	r29
    2bfe:	08 95       	ret

00002c00 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2c00:	df 93       	push	r29
    2c02:	cf 93       	push	r28
    2c04:	0f 92       	push	r0
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	89 83       	std	Y+1, r24	; 0x01

	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2c0c:	eb e2       	ldi	r30, 0x2B	; 43
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	88 2f       	mov	r24, r24
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	80 72       	andi	r24, 0x20	; 32
    2c18:	90 70       	andi	r25, 0x00	; 0
    2c1a:	00 97       	sbiw	r24, 0x00	; 0
    2c1c:	b9 f3       	breq	.-18     	; 0x2c0c <UART_sendByte+0xc>

	UDR = data;
    2c1e:	ec e2       	ldi	r30, 0x2C	; 44
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
    2c24:	80 83       	st	Z, r24

}
    2c26:	0f 90       	pop	r0
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62

	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2c36:	eb e2       	ldi	r30, 0x2B	; 43
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	88 23       	and	r24, r24
    2c3e:	dc f7       	brge	.-10     	; 0x2c36 <UART_recieveByte+0x8>

    return UDR;		
    2c40:	ec e2       	ldi	r30, 0x2C	; 44
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
}
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	00 d0       	rcall	.+0      	; 0x2c52 <UART_sendString+0x6>
    2c52:	0f 92       	push	r0
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	9b 83       	std	Y+3, r25	; 0x03
    2c5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c5c:	19 82       	std	Y+1, r1	; 0x01
    2c5e:	0e c0       	rjmp	.+28     	; 0x2c7c <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	28 2f       	mov	r18, r24
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	8a 81       	ldd	r24, Y+2	; 0x02
    2c68:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	e2 0f       	add	r30, r18
    2c6e:	f3 1f       	adc	r31, r19
    2c70:	80 81       	ld	r24, Z
    2c72:	0e 94 00 16 	call	0x2c00	; 0x2c00 <UART_sendByte>
		i++;
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	8f 5f       	subi	r24, 0xFF	; 255
    2c7a:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	28 2f       	mov	r18, r24
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	9b 81       	ldd	r25, Y+3	; 0x03
    2c86:	fc 01       	movw	r30, r24
    2c88:	e2 0f       	add	r30, r18
    2c8a:	f3 1f       	adc	r31, r19
    2c8c:	80 81       	ld	r24, Z
    2c8e:	88 23       	and	r24, r24
    2c90:	39 f7       	brne	.-50     	; 0x2c60 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

}
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	cf 91       	pop	r28
    2c9a:	df 91       	pop	r29
    2c9c:	08 95       	ret

00002c9e <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2c9e:	0f 93       	push	r16
    2ca0:	1f 93       	push	r17
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	00 d0       	rcall	.+0      	; 0x2ca8 <UART_receiveString+0xa>
    2ca8:	0f 92       	push	r0
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	9b 83       	std	Y+3, r25	; 0x03
    2cb0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cb2:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbe:	8c 01       	movw	r16, r24
    2cc0:	02 0f       	add	r16, r18
    2cc2:	13 1f       	adc	r17, r19
    2cc4:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <UART_recieveByte>
    2cc8:	f8 01       	movw	r30, r16
    2cca:	80 83       	st	Z, r24
    2ccc:	0f c0       	rjmp	.+30     	; 0x2cec <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	8f 5f       	subi	r24, 0xFF	; 255
    2cd2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	28 2f       	mov	r18, r24
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	8a 81       	ldd	r24, Y+2	; 0x02
    2cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cde:	8c 01       	movw	r16, r24
    2ce0:	02 0f       	add	r16, r18
    2ce2:	13 1f       	adc	r17, r19
    2ce4:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <UART_recieveByte>
    2ce8:	f8 01       	movw	r30, r16
    2cea:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	28 2f       	mov	r18, r24
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	e2 0f       	add	r30, r18
    2cfa:	f3 1f       	adc	r31, r19
    2cfc:	80 81       	ld	r24, Z
    2cfe:	83 32       	cpi	r24, 0x23	; 35
    2d00:	31 f7       	brne	.-52     	; 0x2cce <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	e2 0f       	add	r30, r18
    2d10:	f3 1f       	adc	r31, r19
    2d12:	10 82       	st	Z, r1
}
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	1f 91       	pop	r17
    2d20:	0f 91       	pop	r16
    2d22:	08 95       	ret

00002d24 <__divmodsi4>:
    2d24:	97 fb       	bst	r25, 7
    2d26:	09 2e       	mov	r0, r25
    2d28:	05 26       	eor	r0, r21
    2d2a:	0e d0       	rcall	.+28     	; 0x2d48 <__divmodsi4_neg1>
    2d2c:	57 fd       	sbrc	r21, 7
    2d2e:	04 d0       	rcall	.+8      	; 0x2d38 <__divmodsi4_neg2>
    2d30:	14 d0       	rcall	.+40     	; 0x2d5a <__udivmodsi4>
    2d32:	0a d0       	rcall	.+20     	; 0x2d48 <__divmodsi4_neg1>
    2d34:	00 1c       	adc	r0, r0
    2d36:	38 f4       	brcc	.+14     	; 0x2d46 <__divmodsi4_exit>

00002d38 <__divmodsi4_neg2>:
    2d38:	50 95       	com	r21
    2d3a:	40 95       	com	r20
    2d3c:	30 95       	com	r19
    2d3e:	21 95       	neg	r18
    2d40:	3f 4f       	sbci	r19, 0xFF	; 255
    2d42:	4f 4f       	sbci	r20, 0xFF	; 255
    2d44:	5f 4f       	sbci	r21, 0xFF	; 255

00002d46 <__divmodsi4_exit>:
    2d46:	08 95       	ret

00002d48 <__divmodsi4_neg1>:
    2d48:	f6 f7       	brtc	.-4      	; 0x2d46 <__divmodsi4_exit>
    2d4a:	90 95       	com	r25
    2d4c:	80 95       	com	r24
    2d4e:	70 95       	com	r23
    2d50:	61 95       	neg	r22
    2d52:	7f 4f       	sbci	r23, 0xFF	; 255
    2d54:	8f 4f       	sbci	r24, 0xFF	; 255
    2d56:	9f 4f       	sbci	r25, 0xFF	; 255
    2d58:	08 95       	ret

00002d5a <__udivmodsi4>:
    2d5a:	a1 e2       	ldi	r26, 0x21	; 33
    2d5c:	1a 2e       	mov	r1, r26
    2d5e:	aa 1b       	sub	r26, r26
    2d60:	bb 1b       	sub	r27, r27
    2d62:	fd 01       	movw	r30, r26
    2d64:	0d c0       	rjmp	.+26     	; 0x2d80 <__udivmodsi4_ep>

00002d66 <__udivmodsi4_loop>:
    2d66:	aa 1f       	adc	r26, r26
    2d68:	bb 1f       	adc	r27, r27
    2d6a:	ee 1f       	adc	r30, r30
    2d6c:	ff 1f       	adc	r31, r31
    2d6e:	a2 17       	cp	r26, r18
    2d70:	b3 07       	cpc	r27, r19
    2d72:	e4 07       	cpc	r30, r20
    2d74:	f5 07       	cpc	r31, r21
    2d76:	20 f0       	brcs	.+8      	; 0x2d80 <__udivmodsi4_ep>
    2d78:	a2 1b       	sub	r26, r18
    2d7a:	b3 0b       	sbc	r27, r19
    2d7c:	e4 0b       	sbc	r30, r20
    2d7e:	f5 0b       	sbc	r31, r21

00002d80 <__udivmodsi4_ep>:
    2d80:	66 1f       	adc	r22, r22
    2d82:	77 1f       	adc	r23, r23
    2d84:	88 1f       	adc	r24, r24
    2d86:	99 1f       	adc	r25, r25
    2d88:	1a 94       	dec	r1
    2d8a:	69 f7       	brne	.-38     	; 0x2d66 <__udivmodsi4_loop>
    2d8c:	60 95       	com	r22
    2d8e:	70 95       	com	r23
    2d90:	80 95       	com	r24
    2d92:	90 95       	com	r25
    2d94:	9b 01       	movw	r18, r22
    2d96:	ac 01       	movw	r20, r24
    2d98:	bd 01       	movw	r22, r26
    2d9a:	cf 01       	movw	r24, r30
    2d9c:	08 95       	ret

00002d9e <__prologue_saves__>:
    2d9e:	2f 92       	push	r2
    2da0:	3f 92       	push	r3
    2da2:	4f 92       	push	r4
    2da4:	5f 92       	push	r5
    2da6:	6f 92       	push	r6
    2da8:	7f 92       	push	r7
    2daa:	8f 92       	push	r8
    2dac:	9f 92       	push	r9
    2dae:	af 92       	push	r10
    2db0:	bf 92       	push	r11
    2db2:	cf 92       	push	r12
    2db4:	df 92       	push	r13
    2db6:	ef 92       	push	r14
    2db8:	ff 92       	push	r15
    2dba:	0f 93       	push	r16
    2dbc:	1f 93       	push	r17
    2dbe:	cf 93       	push	r28
    2dc0:	df 93       	push	r29
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
    2dc6:	ca 1b       	sub	r28, r26
    2dc8:	db 0b       	sbc	r29, r27
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	f8 94       	cli
    2dce:	de bf       	out	0x3e, r29	; 62
    2dd0:	0f be       	out	0x3f, r0	; 63
    2dd2:	cd bf       	out	0x3d, r28	; 61
    2dd4:	09 94       	ijmp

00002dd6 <__epilogue_restores__>:
    2dd6:	2a 88       	ldd	r2, Y+18	; 0x12
    2dd8:	39 88       	ldd	r3, Y+17	; 0x11
    2dda:	48 88       	ldd	r4, Y+16	; 0x10
    2ddc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dde:	6e 84       	ldd	r6, Y+14	; 0x0e
    2de0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2de2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2de4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2de6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2de8:	b9 84       	ldd	r11, Y+9	; 0x09
    2dea:	c8 84       	ldd	r12, Y+8	; 0x08
    2dec:	df 80       	ldd	r13, Y+7	; 0x07
    2dee:	ee 80       	ldd	r14, Y+6	; 0x06
    2df0:	fd 80       	ldd	r15, Y+5	; 0x05
    2df2:	0c 81       	ldd	r16, Y+4	; 0x04
    2df4:	1b 81       	ldd	r17, Y+3	; 0x03
    2df6:	aa 81       	ldd	r26, Y+2	; 0x02
    2df8:	b9 81       	ldd	r27, Y+1	; 0x01
    2dfa:	ce 0f       	add	r28, r30
    2dfc:	d1 1d       	adc	r29, r1
    2dfe:	0f b6       	in	r0, 0x3f	; 63
    2e00:	f8 94       	cli
    2e02:	de bf       	out	0x3e, r29	; 62
    2e04:	0f be       	out	0x3f, r0	; 63
    2e06:	cd bf       	out	0x3d, r28	; 61
    2e08:	ed 01       	movw	r28, r26
    2e0a:	08 95       	ret

00002e0c <_exit>:
    2e0c:	f8 94       	cli

00002e0e <__stop_program>:
    2e0e:	ff cf       	rjmp	.-2      	; 0x2e0e <__stop_program>
